// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/api/api.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TronNet.Protocol {
  public static partial class Wallet
  {
    static readonly string __ServiceName = "protocol.Wallet";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::TronNet.Protocol.Account> __Marshaller_protocol_Account = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Account.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AccountBalanceRequest> __Marshaller_protocol_AccountBalanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AccountBalanceRequest.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AccountBalanceResponse> __Marshaller_protocol_AccountBalanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AccountBalanceResponse.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BlockBalanceTrace.Types.BlockIdentifier> __Marshaller_protocol_BlockBalanceTrace_BlockIdentifier = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BlockBalanceTrace.Types.BlockIdentifier.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BlockBalanceTrace> __Marshaller_protocol_BlockBalanceTrace = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BlockBalanceTrace.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransferContract> __Marshaller_protocol_TransferContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransferContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Transaction> __Marshaller_protocol_Transaction = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Transaction.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionExtention> __Marshaller_protocol_TransactionExtention = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionExtention.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Return> __Marshaller_protocol_Return = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Return.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AccountUpdateContract> __Marshaller_protocol_AccountUpdateContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AccountUpdateContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.SetAccountIdContract> __Marshaller_protocol_SetAccountIdContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.SetAccountIdContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.VoteWitnessContract> __Marshaller_protocol_VoteWitnessContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.VoteWitnessContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.UpdateSettingContract> __Marshaller_protocol_UpdateSettingContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.UpdateSettingContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.UpdateEnergyLimitContract> __Marshaller_protocol_UpdateEnergyLimitContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.UpdateEnergyLimitContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AssetIssueContract> __Marshaller_protocol_AssetIssueContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AssetIssueContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.WitnessUpdateContract> __Marshaller_protocol_WitnessUpdateContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.WitnessUpdateContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AccountCreateContract> __Marshaller_protocol_AccountCreateContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AccountCreateContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.WitnessCreateContract> __Marshaller_protocol_WitnessCreateContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.WitnessCreateContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransferAssetContract> __Marshaller_protocol_TransferAssetContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransferAssetContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ParticipateAssetIssueContract> __Marshaller_protocol_ParticipateAssetIssueContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ParticipateAssetIssueContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.FreezeBalanceContract> __Marshaller_protocol_FreezeBalanceContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.FreezeBalanceContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.UnfreezeBalanceContract> __Marshaller_protocol_UnfreezeBalanceContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.UnfreezeBalanceContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.UnfreezeAssetContract> __Marshaller_protocol_UnfreezeAssetContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.UnfreezeAssetContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.WithdrawBalanceContract> __Marshaller_protocol_WithdrawBalanceContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.WithdrawBalanceContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.UpdateAssetContract> __Marshaller_protocol_UpdateAssetContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.UpdateAssetContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ProposalCreateContract> __Marshaller_protocol_ProposalCreateContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ProposalCreateContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ProposalApproveContract> __Marshaller_protocol_ProposalApproveContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ProposalApproveContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ProposalDeleteContract> __Marshaller_protocol_ProposalDeleteContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ProposalDeleteContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BuyStorageContract> __Marshaller_protocol_BuyStorageContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BuyStorageContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BuyStorageBytesContract> __Marshaller_protocol_BuyStorageBytesContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BuyStorageBytesContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.SellStorageContract> __Marshaller_protocol_SellStorageContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.SellStorageContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ExchangeCreateContract> __Marshaller_protocol_ExchangeCreateContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ExchangeCreateContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ExchangeInjectContract> __Marshaller_protocol_ExchangeInjectContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ExchangeInjectContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ExchangeWithdrawContract> __Marshaller_protocol_ExchangeWithdrawContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ExchangeWithdrawContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ExchangeTransactionContract> __Marshaller_protocol_ExchangeTransactionContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ExchangeTransactionContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketSellAssetContract> __Marshaller_protocol_MarketSellAssetContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketSellAssetContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketCancelOrderContract> __Marshaller_protocol_MarketCancelOrderContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketCancelOrderContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BytesMessage> __Marshaller_protocol_BytesMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BytesMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketOrder> __Marshaller_protocol_MarketOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketOrder.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketOrderList> __Marshaller_protocol_MarketOrderList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketOrderList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketOrderPair> __Marshaller_protocol_MarketOrderPair = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketOrderPair.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketPriceList> __Marshaller_protocol_MarketPriceList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketPriceList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.EmptyMessage> __Marshaller_protocol_EmptyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EmptyMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketOrderPairList> __Marshaller_protocol_MarketOrderPairList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketOrderPairList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NodeList> __Marshaller_protocol_NodeList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NodeList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AssetIssueList> __Marshaller_protocol_AssetIssueList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AssetIssueList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AccountNetMessage> __Marshaller_protocol_AccountNetMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AccountNetMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AccountResourceMessage> __Marshaller_protocol_AccountResourceMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AccountResourceMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Block> __Marshaller_protocol_Block = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Block.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BlockExtention> __Marshaller_protocol_BlockExtention = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BlockExtention.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NumberMessage> __Marshaller_protocol_NumberMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NumberMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BlockLimit> __Marshaller_protocol_BlockLimit = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BlockLimit.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BlockList> __Marshaller_protocol_BlockList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BlockList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BlockListExtention> __Marshaller_protocol_BlockListExtention = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BlockListExtention.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.CreateSmartContract> __Marshaller_protocol_CreateSmartContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.CreateSmartContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.SmartContract> __Marshaller_protocol_SmartContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.SmartContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.SmartContractDataWrapper> __Marshaller_protocol_SmartContractDataWrapper = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.SmartContractDataWrapper.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TriggerSmartContract> __Marshaller_protocol_TriggerSmartContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TriggerSmartContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ClearABIContract> __Marshaller_protocol_ClearABIContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ClearABIContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.WitnessList> __Marshaller_protocol_WitnessList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.WitnessList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DelegatedResourceMessage> __Marshaller_protocol_DelegatedResourceMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DelegatedResourceMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DelegatedResourceList> __Marshaller_protocol_DelegatedResourceList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DelegatedResourceList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DelegatedResourceAccountIndex> __Marshaller_protocol_DelegatedResourceAccountIndex = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DelegatedResourceAccountIndex.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ProposalList> __Marshaller_protocol_ProposalList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ProposalList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.PaginatedMessage> __Marshaller_protocol_PaginatedMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.PaginatedMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Proposal> __Marshaller_protocol_Proposal = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Proposal.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ExchangeList> __Marshaller_protocol_ExchangeList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ExchangeList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Exchange> __Marshaller_protocol_Exchange = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Exchange.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ChainParameters> __Marshaller_protocol_ChainParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ChainParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionSign> __Marshaller_protocol_TransactionSign = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionSign.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.EasyTransferAssetMessage> __Marshaller_protocol_EasyTransferAssetMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EasyTransferAssetMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.EasyTransferResponse> __Marshaller_protocol_EasyTransferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EasyTransferResponse.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.EasyTransferAssetByPrivateMessage> __Marshaller_protocol_EasyTransferAssetByPrivateMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EasyTransferAssetByPrivateMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.EasyTransferMessage> __Marshaller_protocol_EasyTransferMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EasyTransferMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.EasyTransferByPrivateMessage> __Marshaller_protocol_EasyTransferByPrivateMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EasyTransferByPrivateMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AddressPrKeyPairMessage> __Marshaller_protocol_AddressPrKeyPairMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AddressPrKeyPairMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionInfo> __Marshaller_protocol_TransactionInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionInfo.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AccountPermissionUpdateContract> __Marshaller_protocol_AccountPermissionUpdateContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AccountPermissionUpdateContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionSignWeight> __Marshaller_protocol_TransactionSignWeight = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionSignWeight.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionApprovedList> __Marshaller_protocol_TransactionApprovedList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionApprovedList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NodeInfo> __Marshaller_protocol_NodeInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NodeInfo.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.UpdateBrokerageContract> __Marshaller_protocol_UpdateBrokerageContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.UpdateBrokerageContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.PrivateParameters> __Marshaller_protocol_PrivateParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.PrivateParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.OutputPointInfo> __Marshaller_protocol_OutputPointInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.OutputPointInfo.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IncrementalMerkleVoucherInfo> __Marshaller_protocol_IncrementalMerkleVoucherInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IncrementalMerkleVoucherInfo.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IvkDecryptParameters> __Marshaller_protocol_IvkDecryptParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IvkDecryptParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DecryptNotes> __Marshaller_protocol_DecryptNotes = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DecryptNotes.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IvkDecryptAndMarkParameters> __Marshaller_protocol_IvkDecryptAndMarkParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IvkDecryptAndMarkParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DecryptNotesMarked> __Marshaller_protocol_DecryptNotesMarked = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DecryptNotesMarked.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.OvkDecryptParameters> __Marshaller_protocol_OvkDecryptParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.OvkDecryptParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ExpandedSpendingKeyMessage> __Marshaller_protocol_ExpandedSpendingKeyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ExpandedSpendingKeyMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ViewingKeyMessage> __Marshaller_protocol_ViewingKeyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ViewingKeyMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IncomingViewingKeyMessage> __Marshaller_protocol_IncomingViewingKeyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IncomingViewingKeyMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DiversifierMessage> __Marshaller_protocol_DiversifierMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DiversifierMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ShieldedAddressInfo> __Marshaller_protocol_ShieldedAddressInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ShieldedAddressInfo.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IncomingViewingKeyDiversifierMessage> __Marshaller_protocol_IncomingViewingKeyDiversifierMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IncomingViewingKeyDiversifierMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.PaymentAddressMessage> __Marshaller_protocol_PaymentAddressMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.PaymentAddressMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NoteParameters> __Marshaller_protocol_NoteParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NoteParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.SpendResult> __Marshaller_protocol_SpendResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.SpendResult.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.PrivateParametersWithoutAsk> __Marshaller_protocol_PrivateParametersWithoutAsk = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.PrivateParametersWithoutAsk.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.SpendAuthSigParameters> __Marshaller_protocol_SpendAuthSigParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.SpendAuthSigParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NfParameters> __Marshaller_protocol_NfParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NfParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.PrivateShieldedTRC20Parameters> __Marshaller_protocol_PrivateShieldedTRC20Parameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.PrivateShieldedTRC20Parameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ShieldedTRC20Parameters> __Marshaller_protocol_ShieldedTRC20Parameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ShieldedTRC20Parameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.PrivateShieldedTRC20ParametersWithoutAsk> __Marshaller_protocol_PrivateShieldedTRC20ParametersWithoutAsk = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.PrivateShieldedTRC20ParametersWithoutAsk.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IvkDecryptTRC20Parameters> __Marshaller_protocol_IvkDecryptTRC20Parameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IvkDecryptTRC20Parameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DecryptNotesTRC20> __Marshaller_protocol_DecryptNotesTRC20 = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DecryptNotesTRC20.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.OvkDecryptTRC20Parameters> __Marshaller_protocol_OvkDecryptTRC20Parameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.OvkDecryptTRC20Parameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NfTRC20Parameters> __Marshaller_protocol_NfTRC20Parameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NfTRC20Parameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NullifierResult> __Marshaller_protocol_NullifierResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NullifierResult.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ShieldedTRC20TriggerContractParameters> __Marshaller_protocol_ShieldedTRC20TriggerContractParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ShieldedTRC20TriggerContractParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionInfoList> __Marshaller_protocol_TransactionInfoList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionInfoList.Parser));

    static readonly grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.Account> __Method_GetAccount = new grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_protocol_Account,
        __Marshaller_protocol_Account);

    static readonly grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.Account> __Method_GetAccountById = new grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountById",
        __Marshaller_protocol_Account,
        __Marshaller_protocol_Account);

    static readonly grpc::Method<global::TronNet.Protocol.AccountBalanceRequest, global::TronNet.Protocol.AccountBalanceResponse> __Method_GetAccountBalance = new grpc::Method<global::TronNet.Protocol.AccountBalanceRequest, global::TronNet.Protocol.AccountBalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountBalance",
        __Marshaller_protocol_AccountBalanceRequest,
        __Marshaller_protocol_AccountBalanceResponse);

    static readonly grpc::Method<global::TronNet.Protocol.BlockBalanceTrace.Types.BlockIdentifier, global::TronNet.Protocol.BlockBalanceTrace> __Method_GetBlockBalanceTrace = new grpc::Method<global::TronNet.Protocol.BlockBalanceTrace.Types.BlockIdentifier, global::TronNet.Protocol.BlockBalanceTrace>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockBalanceTrace",
        __Marshaller_protocol_BlockBalanceTrace_BlockIdentifier,
        __Marshaller_protocol_BlockBalanceTrace);

    static readonly grpc::Method<global::TronNet.Protocol.TransferContract, global::TronNet.Protocol.Transaction> __Method_CreateTransaction = new grpc::Method<global::TronNet.Protocol.TransferContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTransaction",
        __Marshaller_protocol_TransferContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.TransferContract, global::TronNet.Protocol.TransactionExtention> __Method_CreateTransaction2 = new grpc::Method<global::TronNet.Protocol.TransferContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTransaction2",
        __Marshaller_protocol_TransferContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.Return> __Method_BroadcastTransaction = new grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.Return>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BroadcastTransaction",
        __Marshaller_protocol_Transaction,
        __Marshaller_protocol_Return);

    static readonly grpc::Method<global::TronNet.Protocol.AccountUpdateContract, global::TronNet.Protocol.Transaction> __Method_UpdateAccount = new grpc::Method<global::TronNet.Protocol.AccountUpdateContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccount",
        __Marshaller_protocol_AccountUpdateContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.SetAccountIdContract, global::TronNet.Protocol.Transaction> __Method_SetAccountId = new grpc::Method<global::TronNet.Protocol.SetAccountIdContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAccountId",
        __Marshaller_protocol_SetAccountIdContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.AccountUpdateContract, global::TronNet.Protocol.TransactionExtention> __Method_UpdateAccount2 = new grpc::Method<global::TronNet.Protocol.AccountUpdateContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccount2",
        __Marshaller_protocol_AccountUpdateContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.VoteWitnessContract, global::TronNet.Protocol.Transaction> __Method_VoteWitnessAccount = new grpc::Method<global::TronNet.Protocol.VoteWitnessContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VoteWitnessAccount",
        __Marshaller_protocol_VoteWitnessContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.UpdateSettingContract, global::TronNet.Protocol.TransactionExtention> __Method_UpdateSetting = new grpc::Method<global::TronNet.Protocol.UpdateSettingContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSetting",
        __Marshaller_protocol_UpdateSettingContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.UpdateEnergyLimitContract, global::TronNet.Protocol.TransactionExtention> __Method_UpdateEnergyLimit = new grpc::Method<global::TronNet.Protocol.UpdateEnergyLimitContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEnergyLimit",
        __Marshaller_protocol_UpdateEnergyLimitContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.VoteWitnessContract, global::TronNet.Protocol.TransactionExtention> __Method_VoteWitnessAccount2 = new grpc::Method<global::TronNet.Protocol.VoteWitnessContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VoteWitnessAccount2",
        __Marshaller_protocol_VoteWitnessContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.AssetIssueContract, global::TronNet.Protocol.Transaction> __Method_CreateAssetIssue = new grpc::Method<global::TronNet.Protocol.AssetIssueContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAssetIssue",
        __Marshaller_protocol_AssetIssueContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.AssetIssueContract, global::TronNet.Protocol.TransactionExtention> __Method_CreateAssetIssue2 = new grpc::Method<global::TronNet.Protocol.AssetIssueContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAssetIssue2",
        __Marshaller_protocol_AssetIssueContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.WitnessUpdateContract, global::TronNet.Protocol.Transaction> __Method_UpdateWitness = new grpc::Method<global::TronNet.Protocol.WitnessUpdateContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWitness",
        __Marshaller_protocol_WitnessUpdateContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.WitnessUpdateContract, global::TronNet.Protocol.TransactionExtention> __Method_UpdateWitness2 = new grpc::Method<global::TronNet.Protocol.WitnessUpdateContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWitness2",
        __Marshaller_protocol_WitnessUpdateContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.AccountCreateContract, global::TronNet.Protocol.Transaction> __Method_CreateAccount = new grpc::Method<global::TronNet.Protocol.AccountCreateContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount",
        __Marshaller_protocol_AccountCreateContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.AccountCreateContract, global::TronNet.Protocol.TransactionExtention> __Method_CreateAccount2 = new grpc::Method<global::TronNet.Protocol.AccountCreateContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount2",
        __Marshaller_protocol_AccountCreateContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.WitnessCreateContract, global::TronNet.Protocol.Transaction> __Method_CreateWitness = new grpc::Method<global::TronNet.Protocol.WitnessCreateContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWitness",
        __Marshaller_protocol_WitnessCreateContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.WitnessCreateContract, global::TronNet.Protocol.TransactionExtention> __Method_CreateWitness2 = new grpc::Method<global::TronNet.Protocol.WitnessCreateContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWitness2",
        __Marshaller_protocol_WitnessCreateContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.TransferAssetContract, global::TronNet.Protocol.Transaction> __Method_TransferAsset = new grpc::Method<global::TronNet.Protocol.TransferAssetContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferAsset",
        __Marshaller_protocol_TransferAssetContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.TransferAssetContract, global::TronNet.Protocol.TransactionExtention> __Method_TransferAsset2 = new grpc::Method<global::TronNet.Protocol.TransferAssetContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferAsset2",
        __Marshaller_protocol_TransferAssetContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ParticipateAssetIssueContract, global::TronNet.Protocol.Transaction> __Method_ParticipateAssetIssue = new grpc::Method<global::TronNet.Protocol.ParticipateAssetIssueContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ParticipateAssetIssue",
        __Marshaller_protocol_ParticipateAssetIssueContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.ParticipateAssetIssueContract, global::TronNet.Protocol.TransactionExtention> __Method_ParticipateAssetIssue2 = new grpc::Method<global::TronNet.Protocol.ParticipateAssetIssueContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ParticipateAssetIssue2",
        __Marshaller_protocol_ParticipateAssetIssueContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.FreezeBalanceContract, global::TronNet.Protocol.Transaction> __Method_FreezeBalance = new grpc::Method<global::TronNet.Protocol.FreezeBalanceContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FreezeBalance",
        __Marshaller_protocol_FreezeBalanceContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.FreezeBalanceContract, global::TronNet.Protocol.TransactionExtention> __Method_FreezeBalance2 = new grpc::Method<global::TronNet.Protocol.FreezeBalanceContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FreezeBalance2",
        __Marshaller_protocol_FreezeBalanceContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.UnfreezeBalanceContract, global::TronNet.Protocol.Transaction> __Method_UnfreezeBalance = new grpc::Method<global::TronNet.Protocol.UnfreezeBalanceContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeBalance",
        __Marshaller_protocol_UnfreezeBalanceContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.UnfreezeBalanceContract, global::TronNet.Protocol.TransactionExtention> __Method_UnfreezeBalance2 = new grpc::Method<global::TronNet.Protocol.UnfreezeBalanceContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeBalance2",
        __Marshaller_protocol_UnfreezeBalanceContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.UnfreezeAssetContract, global::TronNet.Protocol.Transaction> __Method_UnfreezeAsset = new grpc::Method<global::TronNet.Protocol.UnfreezeAssetContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeAsset",
        __Marshaller_protocol_UnfreezeAssetContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.UnfreezeAssetContract, global::TronNet.Protocol.TransactionExtention> __Method_UnfreezeAsset2 = new grpc::Method<global::TronNet.Protocol.UnfreezeAssetContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnfreezeAsset2",
        __Marshaller_protocol_UnfreezeAssetContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.WithdrawBalanceContract, global::TronNet.Protocol.Transaction> __Method_WithdrawBalance = new grpc::Method<global::TronNet.Protocol.WithdrawBalanceContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WithdrawBalance",
        __Marshaller_protocol_WithdrawBalanceContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.WithdrawBalanceContract, global::TronNet.Protocol.TransactionExtention> __Method_WithdrawBalance2 = new grpc::Method<global::TronNet.Protocol.WithdrawBalanceContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WithdrawBalance2",
        __Marshaller_protocol_WithdrawBalanceContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.UpdateAssetContract, global::TronNet.Protocol.Transaction> __Method_UpdateAsset = new grpc::Method<global::TronNet.Protocol.UpdateAssetContract, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAsset",
        __Marshaller_protocol_UpdateAssetContract,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.UpdateAssetContract, global::TronNet.Protocol.TransactionExtention> __Method_UpdateAsset2 = new grpc::Method<global::TronNet.Protocol.UpdateAssetContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAsset2",
        __Marshaller_protocol_UpdateAssetContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ProposalCreateContract, global::TronNet.Protocol.TransactionExtention> __Method_ProposalCreate = new grpc::Method<global::TronNet.Protocol.ProposalCreateContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProposalCreate",
        __Marshaller_protocol_ProposalCreateContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ProposalApproveContract, global::TronNet.Protocol.TransactionExtention> __Method_ProposalApprove = new grpc::Method<global::TronNet.Protocol.ProposalApproveContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProposalApprove",
        __Marshaller_protocol_ProposalApproveContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ProposalDeleteContract, global::TronNet.Protocol.TransactionExtention> __Method_ProposalDelete = new grpc::Method<global::TronNet.Protocol.ProposalDeleteContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProposalDelete",
        __Marshaller_protocol_ProposalDeleteContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.BuyStorageContract, global::TronNet.Protocol.TransactionExtention> __Method_BuyStorage = new grpc::Method<global::TronNet.Protocol.BuyStorageContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BuyStorage",
        __Marshaller_protocol_BuyStorageContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.BuyStorageBytesContract, global::TronNet.Protocol.TransactionExtention> __Method_BuyStorageBytes = new grpc::Method<global::TronNet.Protocol.BuyStorageBytesContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BuyStorageBytes",
        __Marshaller_protocol_BuyStorageBytesContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.SellStorageContract, global::TronNet.Protocol.TransactionExtention> __Method_SellStorage = new grpc::Method<global::TronNet.Protocol.SellStorageContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SellStorage",
        __Marshaller_protocol_SellStorageContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ExchangeCreateContract, global::TronNet.Protocol.TransactionExtention> __Method_ExchangeCreate = new grpc::Method<global::TronNet.Protocol.ExchangeCreateContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExchangeCreate",
        __Marshaller_protocol_ExchangeCreateContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ExchangeInjectContract, global::TronNet.Protocol.TransactionExtention> __Method_ExchangeInject = new grpc::Method<global::TronNet.Protocol.ExchangeInjectContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExchangeInject",
        __Marshaller_protocol_ExchangeInjectContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ExchangeWithdrawContract, global::TronNet.Protocol.TransactionExtention> __Method_ExchangeWithdraw = new grpc::Method<global::TronNet.Protocol.ExchangeWithdrawContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExchangeWithdraw",
        __Marshaller_protocol_ExchangeWithdrawContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ExchangeTransactionContract, global::TronNet.Protocol.TransactionExtention> __Method_ExchangeTransaction = new grpc::Method<global::TronNet.Protocol.ExchangeTransactionContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExchangeTransaction",
        __Marshaller_protocol_ExchangeTransactionContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.MarketSellAssetContract, global::TronNet.Protocol.TransactionExtention> __Method_MarketSellAsset = new grpc::Method<global::TronNet.Protocol.MarketSellAssetContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarketSellAsset",
        __Marshaller_protocol_MarketSellAssetContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.MarketCancelOrderContract, global::TronNet.Protocol.TransactionExtention> __Method_MarketCancelOrder = new grpc::Method<global::TronNet.Protocol.MarketCancelOrderContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarketCancelOrder",
        __Marshaller_protocol_MarketCancelOrderContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.MarketOrder> __Method_GetMarketOrderById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.MarketOrder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketOrderById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_MarketOrder);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.MarketOrderList> __Method_GetMarketOrderByAccount = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.MarketOrderList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketOrderByAccount",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_MarketOrderList);

    static readonly grpc::Method<global::TronNet.Protocol.MarketOrderPair, global::TronNet.Protocol.MarketPriceList> __Method_GetMarketPriceByPair = new grpc::Method<global::TronNet.Protocol.MarketOrderPair, global::TronNet.Protocol.MarketPriceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketPriceByPair",
        __Marshaller_protocol_MarketOrderPair,
        __Marshaller_protocol_MarketPriceList);

    static readonly grpc::Method<global::TronNet.Protocol.MarketOrderPair, global::TronNet.Protocol.MarketOrderList> __Method_GetMarketOrderListByPair = new grpc::Method<global::TronNet.Protocol.MarketOrderPair, global::TronNet.Protocol.MarketOrderList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketOrderListByPair",
        __Marshaller_protocol_MarketOrderPair,
        __Marshaller_protocol_MarketOrderList);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.MarketOrderPairList> __Method_GetMarketPairList = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.MarketOrderPairList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketPairList",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_MarketOrderPairList);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NodeList> __Method_ListNodes = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NodeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNodes",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_NodeList);

    static readonly grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.AssetIssueList> __Method_GetAssetIssueByAccount = new grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueByAccount",
        __Marshaller_protocol_Account,
        __Marshaller_protocol_AssetIssueList);

    static readonly grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.AccountNetMessage> __Method_GetAccountNet = new grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.AccountNetMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountNet",
        __Marshaller_protocol_Account,
        __Marshaller_protocol_AccountNetMessage);

    static readonly grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.AccountResourceMessage> __Method_GetAccountResource = new grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.AccountResourceMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountResource",
        __Marshaller_protocol_Account,
        __Marshaller_protocol_AccountResourceMessage);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueContract> __Method_GetAssetIssueByName = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueContract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueByName",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_AssetIssueContract);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueList> __Method_GetAssetIssueListByName = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueListByName",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_AssetIssueList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueContract> __Method_GetAssetIssueById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueContract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_AssetIssueContract);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.Block> __Method_GetNowBlock = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_Block);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BlockExtention> __Method_GetNowBlock2 = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BlockExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock2",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_BlockExtention);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.Block> __Method_GetBlockByNum = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_Block);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.BlockExtention> __Method_GetBlockByNum2 = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.BlockExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum2",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_BlockExtention);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.NumberMessage> __Method_GetTransactionCountByBlockNum = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionCountByBlockNum",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_NumberMessage);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Block> __Method_GetBlockById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_Block);

    static readonly grpc::Method<global::TronNet.Protocol.BlockLimit, global::TronNet.Protocol.BlockList> __Method_GetBlockByLimitNext = new grpc::Method<global::TronNet.Protocol.BlockLimit, global::TronNet.Protocol.BlockList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLimitNext",
        __Marshaller_protocol_BlockLimit,
        __Marshaller_protocol_BlockList);

    static readonly grpc::Method<global::TronNet.Protocol.BlockLimit, global::TronNet.Protocol.BlockListExtention> __Method_GetBlockByLimitNext2 = new grpc::Method<global::TronNet.Protocol.BlockLimit, global::TronNet.Protocol.BlockListExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLimitNext2",
        __Marshaller_protocol_BlockLimit,
        __Marshaller_protocol_BlockListExtention);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.BlockList> __Method_GetBlockByLatestNum = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.BlockList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLatestNum",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_BlockList);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.BlockListExtention> __Method_GetBlockByLatestNum2 = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.BlockListExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByLatestNum2",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_BlockListExtention);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Transaction> __Method_GetTransactionById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.CreateSmartContract, global::TronNet.Protocol.TransactionExtention> __Method_DeployContract = new grpc::Method<global::TronNet.Protocol.CreateSmartContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeployContract",
        __Marshaller_protocol_CreateSmartContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.SmartContract> __Method_GetContract = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.SmartContract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContract",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_SmartContract);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.SmartContractDataWrapper> __Method_GetContractInfo = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.SmartContractDataWrapper>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractInfo",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_SmartContractDataWrapper);

    static readonly grpc::Method<global::TronNet.Protocol.TriggerSmartContract, global::TronNet.Protocol.TransactionExtention> __Method_TriggerContract = new grpc::Method<global::TronNet.Protocol.TriggerSmartContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TriggerContract",
        __Marshaller_protocol_TriggerSmartContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.TriggerSmartContract, global::TronNet.Protocol.TransactionExtention> __Method_TriggerConstantContract = new grpc::Method<global::TronNet.Protocol.TriggerSmartContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TriggerConstantContract",
        __Marshaller_protocol_TriggerSmartContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.ClearABIContract, global::TronNet.Protocol.TransactionExtention> __Method_ClearContractABI = new grpc::Method<global::TronNet.Protocol.ClearABIContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearContractABI",
        __Marshaller_protocol_ClearABIContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.WitnessList> __Method_ListWitnesses = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.WitnessList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWitnesses",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_WitnessList);

    static readonly grpc::Method<global::TronNet.Protocol.DelegatedResourceMessage, global::TronNet.Protocol.DelegatedResourceList> __Method_GetDelegatedResource = new grpc::Method<global::TronNet.Protocol.DelegatedResourceMessage, global::TronNet.Protocol.DelegatedResourceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDelegatedResource",
        __Marshaller_protocol_DelegatedResourceMessage,
        __Marshaller_protocol_DelegatedResourceList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.DelegatedResourceAccountIndex> __Method_GetDelegatedResourceAccountIndex = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.DelegatedResourceAccountIndex>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDelegatedResourceAccountIndex",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_DelegatedResourceAccountIndex);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ProposalList> __Method_ListProposals = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ProposalList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProposals",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_ProposalList);

    static readonly grpc::Method<global::TronNet.Protocol.PaginatedMessage, global::TronNet.Protocol.ProposalList> __Method_GetPaginatedProposalList = new grpc::Method<global::TronNet.Protocol.PaginatedMessage, global::TronNet.Protocol.ProposalList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPaginatedProposalList",
        __Marshaller_protocol_PaginatedMessage,
        __Marshaller_protocol_ProposalList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Proposal> __Method_GetProposalById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Proposal>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProposalById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_Proposal);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ExchangeList> __Method_ListExchanges = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ExchangeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExchanges",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_ExchangeList);

    static readonly grpc::Method<global::TronNet.Protocol.PaginatedMessage, global::TronNet.Protocol.ExchangeList> __Method_GetPaginatedExchangeList = new grpc::Method<global::TronNet.Protocol.PaginatedMessage, global::TronNet.Protocol.ExchangeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPaginatedExchangeList",
        __Marshaller_protocol_PaginatedMessage,
        __Marshaller_protocol_ExchangeList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Exchange> __Method_GetExchangeById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Exchange>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExchangeById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_Exchange);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ChainParameters> __Method_GetChainParameters = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ChainParameters>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChainParameters",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_ChainParameters);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.AssetIssueList> __Method_GetAssetIssueList = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueList",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_AssetIssueList);

    static readonly grpc::Method<global::TronNet.Protocol.PaginatedMessage, global::TronNet.Protocol.AssetIssueList> __Method_GetPaginatedAssetIssueList = new grpc::Method<global::TronNet.Protocol.PaginatedMessage, global::TronNet.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPaginatedAssetIssueList",
        __Marshaller_protocol_PaginatedMessage,
        __Marshaller_protocol_AssetIssueList);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NumberMessage> __Method_TotalTransaction = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TotalTransaction",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_NumberMessage);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NumberMessage> __Method_GetNextMaintenanceTime = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNextMaintenanceTime",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_NumberMessage);

    static readonly grpc::Method<global::TronNet.Protocol.TransactionSign, global::TronNet.Protocol.Transaction> __Method_GetTransactionSign = new grpc::Method<global::TronNet.Protocol.TransactionSign, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionSign",
        __Marshaller_protocol_TransactionSign,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.TransactionSign, global::TronNet.Protocol.TransactionExtention> __Method_GetTransactionSign2 = new grpc::Method<global::TronNet.Protocol.TransactionSign, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionSign2",
        __Marshaller_protocol_TransactionSign,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.BytesMessage> __Method_CreateAddress = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAddress",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.EasyTransferAssetMessage, global::TronNet.Protocol.EasyTransferResponse> __Method_EasyTransferAsset = new grpc::Method<global::TronNet.Protocol.EasyTransferAssetMessage, global::TronNet.Protocol.EasyTransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EasyTransferAsset",
        __Marshaller_protocol_EasyTransferAssetMessage,
        __Marshaller_protocol_EasyTransferResponse);

    static readonly grpc::Method<global::TronNet.Protocol.EasyTransferAssetByPrivateMessage, global::TronNet.Protocol.EasyTransferResponse> __Method_EasyTransferAssetByPrivate = new grpc::Method<global::TronNet.Protocol.EasyTransferAssetByPrivateMessage, global::TronNet.Protocol.EasyTransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EasyTransferAssetByPrivate",
        __Marshaller_protocol_EasyTransferAssetByPrivateMessage,
        __Marshaller_protocol_EasyTransferResponse);

    static readonly grpc::Method<global::TronNet.Protocol.EasyTransferMessage, global::TronNet.Protocol.EasyTransferResponse> __Method_EasyTransfer = new grpc::Method<global::TronNet.Protocol.EasyTransferMessage, global::TronNet.Protocol.EasyTransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EasyTransfer",
        __Marshaller_protocol_EasyTransferMessage,
        __Marshaller_protocol_EasyTransferResponse);

    static readonly grpc::Method<global::TronNet.Protocol.EasyTransferByPrivateMessage, global::TronNet.Protocol.EasyTransferResponse> __Method_EasyTransferByPrivate = new grpc::Method<global::TronNet.Protocol.EasyTransferByPrivateMessage, global::TronNet.Protocol.EasyTransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EasyTransferByPrivate",
        __Marshaller_protocol_EasyTransferByPrivateMessage,
        __Marshaller_protocol_EasyTransferResponse);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.AddressPrKeyPairMessage> __Method_GenerateAddress = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.AddressPrKeyPairMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAddress",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_AddressPrKeyPairMessage);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.TransactionInfo> __Method_GetTransactionInfoById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.TransactionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionInfoById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_TransactionInfo);

    static readonly grpc::Method<global::TronNet.Protocol.AccountPermissionUpdateContract, global::TronNet.Protocol.TransactionExtention> __Method_AccountPermissionUpdate = new grpc::Method<global::TronNet.Protocol.AccountPermissionUpdateContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AccountPermissionUpdate",
        __Marshaller_protocol_AccountPermissionUpdateContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.TransactionSign, global::TronNet.Protocol.TransactionExtention> __Method_AddSign = new grpc::Method<global::TronNet.Protocol.TransactionSign, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSign",
        __Marshaller_protocol_TransactionSign,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.TransactionSignWeight> __Method_GetTransactionSignWeight = new grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.TransactionSignWeight>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionSignWeight",
        __Marshaller_protocol_Transaction,
        __Marshaller_protocol_TransactionSignWeight);

    static readonly grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.TransactionApprovedList> __Method_GetTransactionApprovedList = new grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.TransactionApprovedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionApprovedList",
        __Marshaller_protocol_Transaction,
        __Marshaller_protocol_TransactionApprovedList);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NodeInfo> __Method_GetNodeInfo = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NodeInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeInfo",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_NodeInfo);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.NumberMessage> __Method_GetRewardInfo = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRewardInfo",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_NumberMessage);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.NumberMessage> __Method_GetBrokerageInfo = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBrokerageInfo",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_NumberMessage);

    static readonly grpc::Method<global::TronNet.Protocol.UpdateBrokerageContract, global::TronNet.Protocol.TransactionExtention> __Method_UpdateBrokerage = new grpc::Method<global::TronNet.Protocol.UpdateBrokerageContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBrokerage",
        __Marshaller_protocol_UpdateBrokerageContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.PrivateParameters, global::TronNet.Protocol.TransactionExtention> __Method_CreateShieldedTransaction = new grpc::Method<global::TronNet.Protocol.PrivateParameters, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateShieldedTransaction",
        __Marshaller_protocol_PrivateParameters,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.OutputPointInfo, global::TronNet.Protocol.IncrementalMerkleVoucherInfo> __Method_GetMerkleTreeVoucherInfo = new grpc::Method<global::TronNet.Protocol.OutputPointInfo, global::TronNet.Protocol.IncrementalMerkleVoucherInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMerkleTreeVoucherInfo",
        __Marshaller_protocol_OutputPointInfo,
        __Marshaller_protocol_IncrementalMerkleVoucherInfo);

    static readonly grpc::Method<global::TronNet.Protocol.IvkDecryptParameters, global::TronNet.Protocol.DecryptNotes> __Method_ScanNoteByIvk = new grpc::Method<global::TronNet.Protocol.IvkDecryptParameters, global::TronNet.Protocol.DecryptNotes>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanNoteByIvk",
        __Marshaller_protocol_IvkDecryptParameters,
        __Marshaller_protocol_DecryptNotes);

    static readonly grpc::Method<global::TronNet.Protocol.IvkDecryptAndMarkParameters, global::TronNet.Protocol.DecryptNotesMarked> __Method_ScanAndMarkNoteByIvk = new grpc::Method<global::TronNet.Protocol.IvkDecryptAndMarkParameters, global::TronNet.Protocol.DecryptNotesMarked>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanAndMarkNoteByIvk",
        __Marshaller_protocol_IvkDecryptAndMarkParameters,
        __Marshaller_protocol_DecryptNotesMarked);

    static readonly grpc::Method<global::TronNet.Protocol.OvkDecryptParameters, global::TronNet.Protocol.DecryptNotes> __Method_ScanNoteByOvk = new grpc::Method<global::TronNet.Protocol.OvkDecryptParameters, global::TronNet.Protocol.DecryptNotes>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanNoteByOvk",
        __Marshaller_protocol_OvkDecryptParameters,
        __Marshaller_protocol_DecryptNotes);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BytesMessage> __Method_GetSpendingKey = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSpendingKey",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.ExpandedSpendingKeyMessage> __Method_GetExpandedSpendingKey = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.ExpandedSpendingKeyMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExpandedSpendingKey",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_ExpandedSpendingKeyMessage);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.BytesMessage> __Method_GetAkFromAsk = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAkFromAsk",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.BytesMessage> __Method_GetNkFromNsk = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNkFromNsk",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.ViewingKeyMessage, global::TronNet.Protocol.IncomingViewingKeyMessage> __Method_GetIncomingViewingKey = new grpc::Method<global::TronNet.Protocol.ViewingKeyMessage, global::TronNet.Protocol.IncomingViewingKeyMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIncomingViewingKey",
        __Marshaller_protocol_ViewingKeyMessage,
        __Marshaller_protocol_IncomingViewingKeyMessage);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.DiversifierMessage> __Method_GetDiversifier = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.DiversifierMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDiversifier",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_DiversifierMessage);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ShieldedAddressInfo> __Method_GetNewShieldedAddress = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ShieldedAddressInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNewShieldedAddress",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_ShieldedAddressInfo);

    static readonly grpc::Method<global::TronNet.Protocol.IncomingViewingKeyDiversifierMessage, global::TronNet.Protocol.PaymentAddressMessage> __Method_GetZenPaymentAddress = new grpc::Method<global::TronNet.Protocol.IncomingViewingKeyDiversifierMessage, global::TronNet.Protocol.PaymentAddressMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetZenPaymentAddress",
        __Marshaller_protocol_IncomingViewingKeyDiversifierMessage,
        __Marshaller_protocol_PaymentAddressMessage);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BytesMessage> __Method_GetRcm = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRcm",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.NoteParameters, global::TronNet.Protocol.SpendResult> __Method_IsSpend = new grpc::Method<global::TronNet.Protocol.NoteParameters, global::TronNet.Protocol.SpendResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsSpend",
        __Marshaller_protocol_NoteParameters,
        __Marshaller_protocol_SpendResult);

    static readonly grpc::Method<global::TronNet.Protocol.PrivateParametersWithoutAsk, global::TronNet.Protocol.TransactionExtention> __Method_CreateShieldedTransactionWithoutSpendAuthSig = new grpc::Method<global::TronNet.Protocol.PrivateParametersWithoutAsk, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateShieldedTransactionWithoutSpendAuthSig",
        __Marshaller_protocol_PrivateParametersWithoutAsk,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.BytesMessage> __Method_GetShieldTransactionHash = new grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShieldTransactionHash",
        __Marshaller_protocol_Transaction,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.SpendAuthSigParameters, global::TronNet.Protocol.BytesMessage> __Method_CreateSpendAuthSig = new grpc::Method<global::TronNet.Protocol.SpendAuthSigParameters, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSpendAuthSig",
        __Marshaller_protocol_SpendAuthSigParameters,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.NfParameters, global::TronNet.Protocol.BytesMessage> __Method_CreateShieldNullifier = new grpc::Method<global::TronNet.Protocol.NfParameters, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateShieldNullifier",
        __Marshaller_protocol_NfParameters,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.PrivateShieldedTRC20Parameters, global::TronNet.Protocol.ShieldedTRC20Parameters> __Method_CreateShieldedContractParameters = new grpc::Method<global::TronNet.Protocol.PrivateShieldedTRC20Parameters, global::TronNet.Protocol.ShieldedTRC20Parameters>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateShieldedContractParameters",
        __Marshaller_protocol_PrivateShieldedTRC20Parameters,
        __Marshaller_protocol_ShieldedTRC20Parameters);

    static readonly grpc::Method<global::TronNet.Protocol.PrivateShieldedTRC20ParametersWithoutAsk, global::TronNet.Protocol.ShieldedTRC20Parameters> __Method_CreateShieldedContractParametersWithoutAsk = new grpc::Method<global::TronNet.Protocol.PrivateShieldedTRC20ParametersWithoutAsk, global::TronNet.Protocol.ShieldedTRC20Parameters>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateShieldedContractParametersWithoutAsk",
        __Marshaller_protocol_PrivateShieldedTRC20ParametersWithoutAsk,
        __Marshaller_protocol_ShieldedTRC20Parameters);

    static readonly grpc::Method<global::TronNet.Protocol.IvkDecryptTRC20Parameters, global::TronNet.Protocol.DecryptNotesTRC20> __Method_ScanShieldedTRC20NotesByIvk = new grpc::Method<global::TronNet.Protocol.IvkDecryptTRC20Parameters, global::TronNet.Protocol.DecryptNotesTRC20>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanShieldedTRC20NotesByIvk",
        __Marshaller_protocol_IvkDecryptTRC20Parameters,
        __Marshaller_protocol_DecryptNotesTRC20);

    static readonly grpc::Method<global::TronNet.Protocol.OvkDecryptTRC20Parameters, global::TronNet.Protocol.DecryptNotesTRC20> __Method_ScanShieldedTRC20NotesByOvk = new grpc::Method<global::TronNet.Protocol.OvkDecryptTRC20Parameters, global::TronNet.Protocol.DecryptNotesTRC20>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanShieldedTRC20NotesByOvk",
        __Marshaller_protocol_OvkDecryptTRC20Parameters,
        __Marshaller_protocol_DecryptNotesTRC20);

    static readonly grpc::Method<global::TronNet.Protocol.NfTRC20Parameters, global::TronNet.Protocol.NullifierResult> __Method_IsShieldedTRC20ContractNoteSpent = new grpc::Method<global::TronNet.Protocol.NfTRC20Parameters, global::TronNet.Protocol.NullifierResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsShieldedTRC20ContractNoteSpent",
        __Marshaller_protocol_NfTRC20Parameters,
        __Marshaller_protocol_NullifierResult);

    static readonly grpc::Method<global::TronNet.Protocol.ShieldedTRC20TriggerContractParameters, global::TronNet.Protocol.BytesMessage> __Method_GetTriggerInputForShieldedTRC20Contract = new grpc::Method<global::TronNet.Protocol.ShieldedTRC20TriggerContractParameters, global::TronNet.Protocol.BytesMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTriggerInputForShieldedTRC20Contract",
        __Marshaller_protocol_ShieldedTRC20TriggerContractParameters,
        __Marshaller_protocol_BytesMessage);

    static readonly grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.TransactionExtention> __Method_CreateCommonTransaction = new grpc::Method<global::TronNet.Protocol.Transaction, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCommonTransaction",
        __Marshaller_protocol_Transaction,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.TransactionInfoList> __Method_GetTransactionInfoByBlockNum = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.TransactionInfoList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionInfoByBlockNum",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_TransactionInfoList);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NumberMessage> __Method_GetBurnTrx = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBurnTrx",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_NumberMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TronNet.Protocol.ApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Wallet</summary>
    public partial class WalletClient : grpc::ClientBase<WalletClient>
    {
      /// <summary>Creates a new client for Wallet</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Wallet that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::TronNet.Protocol.Account GetAccount(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Account GetAccount(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Account> GetAccountAsync(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Account> GetAccountAsync(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual global::TronNet.Protocol.Account GetAccountById(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Account GetAccountById(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Account> GetAccountByIdAsync(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Account> GetAccountByIdAsync(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountById, null, options, request);
      }
      public virtual global::TronNet.Protocol.AccountBalanceResponse GetAccountBalance(global::TronNet.Protocol.AccountBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AccountBalanceResponse GetAccountBalance(global::TronNet.Protocol.AccountBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AccountBalanceResponse> GetAccountBalanceAsync(global::TronNet.Protocol.AccountBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AccountBalanceResponse> GetAccountBalanceAsync(global::TronNet.Protocol.AccountBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountBalance, null, options, request);
      }
      public virtual global::TronNet.Protocol.BlockBalanceTrace GetBlockBalanceTrace(global::TronNet.Protocol.BlockBalanceTrace.Types.BlockIdentifier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockBalanceTrace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BlockBalanceTrace GetBlockBalanceTrace(global::TronNet.Protocol.BlockBalanceTrace.Types.BlockIdentifier request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockBalanceTrace, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockBalanceTrace> GetBlockBalanceTraceAsync(global::TronNet.Protocol.BlockBalanceTrace.Types.BlockIdentifier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockBalanceTraceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockBalanceTrace> GetBlockBalanceTraceAsync(global::TronNet.Protocol.BlockBalanceTrace.Types.BlockIdentifier request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockBalanceTrace, null, options, request);
      }
      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction CreateTransaction(global::TronNet.Protocol.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction CreateTransaction(global::TronNet.Protocol.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTransaction, null, options, request);
      }
      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> CreateTransactionAsync(global::TronNet.Protocol.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateTransaction2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> CreateTransactionAsync(global::TronNet.Protocol.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTransaction, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateTransaction2(global::TronNet.Protocol.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransaction2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateTransaction2(global::TronNet.Protocol.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTransaction2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateTransaction2Async(global::TronNet.Protocol.TransferContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTransaction2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateTransaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateTransaction2Async(global::TronNet.Protocol.TransferContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTransaction2, null, options, request);
      }
      public virtual global::TronNet.Protocol.Return BroadcastTransaction(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Return BroadcastTransaction(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BroadcastTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Return> BroadcastTransactionAsync(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Return> BroadcastTransactionAsync(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BroadcastTransaction, null, options, request);
      }
      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UpdateAccount(global::TronNet.Protocol.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UpdateAccount(global::TronNet.Protocol.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccount, null, options, request);
      }
      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UpdateAccountAsync(global::TronNet.Protocol.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UpdateAccountAsync(global::TronNet.Protocol.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccount, null, options, request);
      }
      public virtual global::TronNet.Protocol.Transaction SetAccountId(global::TronNet.Protocol.SetAccountIdContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAccountId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Transaction SetAccountId(global::TronNet.Protocol.SetAccountIdContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAccountId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> SetAccountIdAsync(global::TronNet.Protocol.SetAccountIdContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAccountIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> SetAccountIdAsync(global::TronNet.Protocol.SetAccountIdContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAccountId, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateAccount2(global::TronNet.Protocol.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccount2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateAccount2(global::TronNet.Protocol.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccount2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateAccount2Async(global::TronNet.Protocol.AccountUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccount2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateAccount2Async(global::TronNet.Protocol.AccountUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccount2, null, options, request);
      }
      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction VoteWitnessAccount(global::TronNet.Protocol.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction VoteWitnessAccount(global::TronNet.Protocol.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoteWitnessAccount, null, options, request);
      }
      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> VoteWitnessAccountAsync(global::TronNet.Protocol.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use VoteWitnessAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> VoteWitnessAccountAsync(global::TronNet.Protocol.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoteWitnessAccount, null, options, request);
      }
      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateSetting(global::TronNet.Protocol.UpdateSettingContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSetting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateSetting(global::TronNet.Protocol.UpdateSettingContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSetting, null, options, request);
      }
      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateSettingAsync(global::TronNet.Protocol.UpdateSettingContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSettingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///modify the consume_user_resource_percent
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateSettingAsync(global::TronNet.Protocol.UpdateSettingContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSetting, null, options, request);
      }
      /// <summary>
      ///modify the energy_limit
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateEnergyLimit(global::TronNet.Protocol.UpdateEnergyLimitContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnergyLimit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///modify the energy_limit
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateEnergyLimit(global::TronNet.Protocol.UpdateEnergyLimitContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEnergyLimit, null, options, request);
      }
      /// <summary>
      ///modify the energy_limit
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateEnergyLimitAsync(global::TronNet.Protocol.UpdateEnergyLimitContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnergyLimitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///modify the energy_limit
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateEnergyLimitAsync(global::TronNet.Protocol.UpdateEnergyLimitContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEnergyLimit, null, options, request);
      }
      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention VoteWitnessAccount2(global::TronNet.Protocol.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccount2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention VoteWitnessAccount2(global::TronNet.Protocol.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoteWitnessAccount2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> VoteWitnessAccount2Async(global::TronNet.Protocol.VoteWitnessContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteWitnessAccount2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of VoteWitnessAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> VoteWitnessAccount2Async(global::TronNet.Protocol.VoteWitnessContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoteWitnessAccount2, null, options, request);
      }
      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction CreateAssetIssue(global::TronNet.Protocol.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction CreateAssetIssue(global::TronNet.Protocol.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAssetIssue, null, options, request);
      }
      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> CreateAssetIssueAsync(global::TronNet.Protocol.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> CreateAssetIssueAsync(global::TronNet.Protocol.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAssetIssue, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateAssetIssue2(global::TronNet.Protocol.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssue2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateAssetIssue2(global::TronNet.Protocol.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAssetIssue2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateAssetIssue2Async(global::TronNet.Protocol.AssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetIssue2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateAssetIssue2Async(global::TronNet.Protocol.AssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAssetIssue2, null, options, request);
      }
      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UpdateWitness(global::TronNet.Protocol.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitness(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UpdateWitness(global::TronNet.Protocol.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWitness, null, options, request);
      }
      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UpdateWitnessAsync(global::TronNet.Protocol.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitnessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UpdateWitnessAsync(global::TronNet.Protocol.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWitness, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateWitness2(global::TronNet.Protocol.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitness2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateWitness2(global::TronNet.Protocol.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWitness2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateWitness2Async(global::TronNet.Protocol.WitnessUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWitness2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateWitness2Async(global::TronNet.Protocol.WitnessUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWitness2, null, options, request);
      }
      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction CreateAccount(global::TronNet.Protocol.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction CreateAccount(global::TronNet.Protocol.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> CreateAccountAsync(global::TronNet.Protocol.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateAccount2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> CreateAccountAsync(global::TronNet.Protocol.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateAccount2(global::TronNet.Protocol.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateAccount2(global::TronNet.Protocol.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateAccount2Async(global::TronNet.Protocol.AccountCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateAccount2Async(global::TronNet.Protocol.AccountCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount2, null, options, request);
      }
      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction CreateWitness(global::TronNet.Protocol.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitness(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction CreateWitness(global::TronNet.Protocol.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWitness, null, options, request);
      }
      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> CreateWitnessAsync(global::TronNet.Protocol.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitnessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use CreateWitness2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> CreateWitnessAsync(global::TronNet.Protocol.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWitness, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateWitness2(global::TronNet.Protocol.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitness2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateWitness2(global::TronNet.Protocol.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWitness2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateWitness2Async(global::TronNet.Protocol.WitnessCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWitness2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of CreateWitness.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateWitness2Async(global::TronNet.Protocol.WitnessCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWitness2, null, options, request);
      }
      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction TransferAsset(global::TronNet.Protocol.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction TransferAsset(global::TronNet.Protocol.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferAsset, null, options, request);
      }
      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> TransferAssetAsync(global::TronNet.Protocol.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use TransferAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> TransferAssetAsync(global::TronNet.Protocol.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferAsset, null, options, request);
      }
      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention TransferAsset2(global::TronNet.Protocol.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsset2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention TransferAsset2(global::TronNet.Protocol.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferAsset2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> TransferAsset2Async(global::TronNet.Protocol.TransferAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsset2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of TransferAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> TransferAsset2Async(global::TronNet.Protocol.TransferAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferAsset2, null, options, request);
      }
      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction ParticipateAssetIssue(global::TronNet.Protocol.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction ParticipateAssetIssue(global::TronNet.Protocol.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ParticipateAssetIssue, null, options, request);
      }
      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> ParticipateAssetIssueAsync(global::TronNet.Protocol.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use ParticipateAssetIssue2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> ParticipateAssetIssueAsync(global::TronNet.Protocol.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ParticipateAssetIssue, null, options, request);
      }
      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention ParticipateAssetIssue2(global::TronNet.Protocol.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssue2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention ParticipateAssetIssue2(global::TronNet.Protocol.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ParticipateAssetIssue2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ParticipateAssetIssue2Async(global::TronNet.Protocol.ParticipateAssetIssueContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParticipateAssetIssue2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of ParticipateAssetIssue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ParticipateAssetIssue2Async(global::TronNet.Protocol.ParticipateAssetIssueContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ParticipateAssetIssue2, null, options, request);
      }
      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction FreezeBalance(global::TronNet.Protocol.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction FreezeBalance(global::TronNet.Protocol.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FreezeBalance, null, options, request);
      }
      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> FreezeBalanceAsync(global::TronNet.Protocol.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use FreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> FreezeBalanceAsync(global::TronNet.Protocol.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FreezeBalance, null, options, request);
      }
      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention FreezeBalance2(global::TronNet.Protocol.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalance2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention FreezeBalance2(global::TronNet.Protocol.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FreezeBalance2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> FreezeBalance2Async(global::TronNet.Protocol.FreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeBalance2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of FreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> FreezeBalance2Async(global::TronNet.Protocol.FreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FreezeBalance2, null, options, request);
      }
      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UnfreezeBalance(global::TronNet.Protocol.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UnfreezeBalance(global::TronNet.Protocol.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeBalance, null, options, request);
      }
      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UnfreezeBalanceAsync(global::TronNet.Protocol.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UnfreezeBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UnfreezeBalanceAsync(global::TronNet.Protocol.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeBalance, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UnfreezeBalance2(global::TronNet.Protocol.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalance2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UnfreezeBalance2(global::TronNet.Protocol.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeBalance2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UnfreezeBalance2Async(global::TronNet.Protocol.UnfreezeBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeBalance2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UnfreezeBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UnfreezeBalance2Async(global::TronNet.Protocol.UnfreezeBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeBalance2, null, options, request);
      }
      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UnfreezeAsset(global::TronNet.Protocol.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UnfreezeAsset(global::TronNet.Protocol.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeAsset, null, options, request);
      }
      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UnfreezeAssetAsync(global::TronNet.Protocol.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UnfreezeAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UnfreezeAssetAsync(global::TronNet.Protocol.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeAsset, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UnfreezeAsset2(global::TronNet.Protocol.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsset2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UnfreezeAsset2(global::TronNet.Protocol.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnfreezeAsset2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UnfreezeAsset2Async(global::TronNet.Protocol.UnfreezeAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsset2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UnfreezeAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UnfreezeAsset2Async(global::TronNet.Protocol.UnfreezeAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnfreezeAsset2, null, options, request);
      }
      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction WithdrawBalance(global::TronNet.Protocol.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction WithdrawBalance(global::TronNet.Protocol.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithdrawBalance, null, options, request);
      }
      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> WithdrawBalanceAsync(global::TronNet.Protocol.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use WithdrawBalance2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> WithdrawBalanceAsync(global::TronNet.Protocol.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithdrawBalance, null, options, request);
      }
      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention WithdrawBalance2(global::TronNet.Protocol.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalance2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention WithdrawBalance2(global::TronNet.Protocol.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithdrawBalance2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> WithdrawBalance2Async(global::TronNet.Protocol.WithdrawBalanceContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawBalance2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of WithdrawBalance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> WithdrawBalance2Async(global::TronNet.Protocol.WithdrawBalanceContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithdrawBalance2, null, options, request);
      }
      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UpdateAsset(global::TronNet.Protocol.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction UpdateAsset(global::TronNet.Protocol.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAsset, null, options, request);
      }
      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UpdateAssetAsync(global::TronNet.Protocol.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use UpdateAsset2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> UpdateAssetAsync(global::TronNet.Protocol.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAsset, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateAsset2(global::TronNet.Protocol.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsset2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention UpdateAsset2(global::TronNet.Protocol.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAsset2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateAsset2Async(global::TronNet.Protocol.UpdateAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsset2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of UpdateAsset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateAsset2Async(global::TronNet.Protocol.UpdateAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAsset2, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention ProposalCreate(global::TronNet.Protocol.ProposalCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalCreate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention ProposalCreate(global::TronNet.Protocol.ProposalCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProposalCreate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ProposalCreateAsync(global::TronNet.Protocol.ProposalCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalCreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ProposalCreateAsync(global::TronNet.Protocol.ProposalCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProposalCreate, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention ProposalApprove(global::TronNet.Protocol.ProposalApproveContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalApprove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention ProposalApprove(global::TronNet.Protocol.ProposalApproveContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProposalApprove, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ProposalApproveAsync(global::TronNet.Protocol.ProposalApproveContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalApproveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ProposalApproveAsync(global::TronNet.Protocol.ProposalApproveContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProposalApprove, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention ProposalDelete(global::TronNet.Protocol.ProposalDeleteContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention ProposalDelete(global::TronNet.Protocol.ProposalDeleteContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProposalDelete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ProposalDeleteAsync(global::TronNet.Protocol.ProposalDeleteContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProposalDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ProposalDeleteAsync(global::TronNet.Protocol.ProposalDeleteContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProposalDelete, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention BuyStorage(global::TronNet.Protocol.BuyStorageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyStorage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention BuyStorage(global::TronNet.Protocol.BuyStorageContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BuyStorage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> BuyStorageAsync(global::TronNet.Protocol.BuyStorageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyStorageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> BuyStorageAsync(global::TronNet.Protocol.BuyStorageContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BuyStorage, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention BuyStorageBytes(global::TronNet.Protocol.BuyStorageBytesContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyStorageBytes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention BuyStorageBytes(global::TronNet.Protocol.BuyStorageBytesContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BuyStorageBytes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> BuyStorageBytesAsync(global::TronNet.Protocol.BuyStorageBytesContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BuyStorageBytesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> BuyStorageBytesAsync(global::TronNet.Protocol.BuyStorageBytesContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BuyStorageBytes, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention SellStorage(global::TronNet.Protocol.SellStorageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SellStorage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention SellStorage(global::TronNet.Protocol.SellStorageContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SellStorage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> SellStorageAsync(global::TronNet.Protocol.SellStorageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SellStorageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> SellStorageAsync(global::TronNet.Protocol.SellStorageContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SellStorage, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention ExchangeCreate(global::TronNet.Protocol.ExchangeCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeCreate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention ExchangeCreate(global::TronNet.Protocol.ExchangeCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExchangeCreate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ExchangeCreateAsync(global::TronNet.Protocol.ExchangeCreateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeCreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ExchangeCreateAsync(global::TronNet.Protocol.ExchangeCreateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExchangeCreate, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention ExchangeInject(global::TronNet.Protocol.ExchangeInjectContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeInject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention ExchangeInject(global::TronNet.Protocol.ExchangeInjectContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExchangeInject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ExchangeInjectAsync(global::TronNet.Protocol.ExchangeInjectContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeInjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ExchangeInjectAsync(global::TronNet.Protocol.ExchangeInjectContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExchangeInject, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention ExchangeWithdraw(global::TronNet.Protocol.ExchangeWithdrawContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeWithdraw(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention ExchangeWithdraw(global::TronNet.Protocol.ExchangeWithdrawContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExchangeWithdraw, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ExchangeWithdrawAsync(global::TronNet.Protocol.ExchangeWithdrawContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeWithdrawAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ExchangeWithdrawAsync(global::TronNet.Protocol.ExchangeWithdrawContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExchangeWithdraw, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention ExchangeTransaction(global::TronNet.Protocol.ExchangeTransactionContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention ExchangeTransaction(global::TronNet.Protocol.ExchangeTransactionContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExchangeTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ExchangeTransactionAsync(global::TronNet.Protocol.ExchangeTransactionContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ExchangeTransactionAsync(global::TronNet.Protocol.ExchangeTransactionContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExchangeTransaction, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention MarketSellAsset(global::TronNet.Protocol.MarketSellAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketSellAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention MarketSellAsset(global::TronNet.Protocol.MarketSellAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarketSellAsset, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> MarketSellAssetAsync(global::TronNet.Protocol.MarketSellAssetContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketSellAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> MarketSellAssetAsync(global::TronNet.Protocol.MarketSellAssetContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarketSellAsset, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention MarketCancelOrder(global::TronNet.Protocol.MarketCancelOrderContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketCancelOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention MarketCancelOrder(global::TronNet.Protocol.MarketCancelOrderContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarketCancelOrder, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> MarketCancelOrderAsync(global::TronNet.Protocol.MarketCancelOrderContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketCancelOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> MarketCancelOrderAsync(global::TronNet.Protocol.MarketCancelOrderContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarketCancelOrder, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketOrder GetMarketOrderById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketOrder GetMarketOrderById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketOrderById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrder> GetMarketOrderByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrder> GetMarketOrderByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketOrderById, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketOrderList GetMarketOrderByAccount(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderByAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketOrderList GetMarketOrderByAccount(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketOrderByAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderList> GetMarketOrderByAccountAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderByAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderList> GetMarketOrderByAccountAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketOrderByAccount, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketPriceList GetMarketPriceByPair(global::TronNet.Protocol.MarketOrderPair request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketPriceByPair(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketPriceList GetMarketPriceByPair(global::TronNet.Protocol.MarketOrderPair request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketPriceByPair, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketPriceList> GetMarketPriceByPairAsync(global::TronNet.Protocol.MarketOrderPair request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketPriceByPairAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketPriceList> GetMarketPriceByPairAsync(global::TronNet.Protocol.MarketOrderPair request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketPriceByPair, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketOrderList GetMarketOrderListByPair(global::TronNet.Protocol.MarketOrderPair request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderListByPair(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketOrderList GetMarketOrderListByPair(global::TronNet.Protocol.MarketOrderPair request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketOrderListByPair, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderList> GetMarketOrderListByPairAsync(global::TronNet.Protocol.MarketOrderPair request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderListByPairAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderList> GetMarketOrderListByPairAsync(global::TronNet.Protocol.MarketOrderPair request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketOrderListByPair, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketOrderPairList GetMarketPairList(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketPairList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketOrderPairList GetMarketPairList(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketPairList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderPairList> GetMarketPairListAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketPairListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderPairList> GetMarketPairListAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketPairList, null, options, request);
      }
      public virtual global::TronNet.Protocol.NodeList ListNodes(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NodeList ListNodes(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNodes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NodeList> ListNodesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NodeList> ListNodesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNodes, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueByAccount(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueByAccount(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueByAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueByAccountAsync(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueByAccountAsync(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueByAccount, null, options, request);
      }
      public virtual global::TronNet.Protocol.AccountNetMessage GetAccountNet(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountNet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AccountNetMessage GetAccountNet(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountNet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AccountNetMessage> GetAccountNetAsync(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountNetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AccountNetMessage> GetAccountNetAsync(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountNet, null, options, request);
      }
      public virtual global::TronNet.Protocol.AccountResourceMessage GetAccountResource(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AccountResourceMessage GetAccountResource(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountResource, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AccountResourceMessage> GetAccountResourceAsync(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AccountResourceMessage> GetAccountResourceAsync(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountResource, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueContract GetAssetIssueByName(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueContract GetAssetIssueByName(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueContract> GetAssetIssueByNameAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueContract> GetAssetIssueByNameAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueByName, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueListByName(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueListByName(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueListByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueListByNameAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueListByNameAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueListByName, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueContract GetAssetIssueById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueContract GetAssetIssueById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueContract> GetAssetIssueByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueContract> GetAssetIssueByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueById, null, options, request);
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Block GetNowBlock(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Block GetNowBlock(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetNowBlockAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetNowBlockAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockExtention GetNowBlock2(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockExtention GetNowBlock2(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockExtention> GetNowBlock2Async(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockExtention> GetNowBlock2Async(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock2, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Block GetBlockByNum(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Block GetBlockByNum(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetBlockByNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetBlockByNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockExtention GetBlockByNum2(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockExtention GetBlockByNum2(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockExtention> GetBlockByNum2Async(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockExtention> GetBlockByNum2Async(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum2, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetTransactionCountByBlockNum(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionCountByBlockNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetTransactionCountByBlockNum(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionCountByBlockNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetTransactionCountByBlockNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionCountByBlockNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetTransactionCountByBlockNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionCountByBlockNum, null, options, request);
      }
      public virtual global::TronNet.Protocol.Block GetBlockById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Block GetBlockById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetBlockByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetBlockByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockById, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockList GetBlockByLimitNext(global::TronNet.Protocol.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNext(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockList GetBlockByLimitNext(global::TronNet.Protocol.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLimitNext, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockList> GetBlockByLimitNextAsync(global::TronNet.Protocol.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByLimitNext2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockList> GetBlockByLimitNextAsync(global::TronNet.Protocol.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLimitNext, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockListExtention GetBlockByLimitNext2(global::TronNet.Protocol.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNext2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockListExtention GetBlockByLimitNext2(global::TronNet.Protocol.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLimitNext2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockListExtention> GetBlockByLimitNext2Async(global::TronNet.Protocol.BlockLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLimitNext2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByLimitNext.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockListExtention> GetBlockByLimitNext2Async(global::TronNet.Protocol.BlockLimit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLimitNext2, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockList GetBlockByLatestNum(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockList GetBlockByLatestNum(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLatestNum, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockList> GetBlockByLatestNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByLatestNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockList> GetBlockByLatestNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLatestNum, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockListExtention GetBlockByLatestNum2(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNum2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockListExtention GetBlockByLatestNum2(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByLatestNum2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockListExtention> GetBlockByLatestNum2Async(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByLatestNum2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByLatestNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockListExtention> GetBlockByLatestNum2Async(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByLatestNum2, null, options, request);
      }
      public virtual global::TronNet.Protocol.Transaction GetTransactionById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Transaction GetTransactionById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> GetTransactionByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> GetTransactionByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention DeployContract(global::TronNet.Protocol.CreateSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention DeployContract(global::TronNet.Protocol.CreateSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeployContract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> DeployContractAsync(global::TronNet.Protocol.CreateSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> DeployContractAsync(global::TronNet.Protocol.CreateSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeployContract, null, options, request);
      }
      public virtual global::TronNet.Protocol.SmartContract GetContract(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.SmartContract GetContract(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.SmartContract> GetContractAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.SmartContract> GetContractAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContract, null, options, request);
      }
      public virtual global::TronNet.Protocol.SmartContractDataWrapper GetContractInfo(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.SmartContractDataWrapper GetContractInfo(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.SmartContractDataWrapper> GetContractInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.SmartContractDataWrapper> GetContractInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractInfo, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention TriggerContract(global::TronNet.Protocol.TriggerSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention TriggerContract(global::TronNet.Protocol.TriggerSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TriggerContract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> TriggerContractAsync(global::TronNet.Protocol.TriggerSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> TriggerContractAsync(global::TronNet.Protocol.TriggerSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TriggerContract, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention TriggerConstantContract(global::TronNet.Protocol.TriggerSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerConstantContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention TriggerConstantContract(global::TronNet.Protocol.TriggerSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TriggerConstantContract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> TriggerConstantContractAsync(global::TronNet.Protocol.TriggerSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerConstantContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> TriggerConstantContractAsync(global::TronNet.Protocol.TriggerSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TriggerConstantContract, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention ClearContractABI(global::TronNet.Protocol.ClearABIContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearContractABI(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention ClearContractABI(global::TronNet.Protocol.ClearABIContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearContractABI, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ClearContractABIAsync(global::TronNet.Protocol.ClearABIContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearContractABIAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> ClearContractABIAsync(global::TronNet.Protocol.ClearABIContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearContractABI, null, options, request);
      }
      public virtual global::TronNet.Protocol.WitnessList ListWitnesses(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnesses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.WitnessList ListWitnesses(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.WitnessList> ListWitnessesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnessesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.WitnessList> ListWitnessesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual global::TronNet.Protocol.DelegatedResourceList GetDelegatedResource(global::TronNet.Protocol.DelegatedResourceMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelegatedResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DelegatedResourceList GetDelegatedResource(global::TronNet.Protocol.DelegatedResourceMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDelegatedResource, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DelegatedResourceList> GetDelegatedResourceAsync(global::TronNet.Protocol.DelegatedResourceMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelegatedResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DelegatedResourceList> GetDelegatedResourceAsync(global::TronNet.Protocol.DelegatedResourceMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDelegatedResource, null, options, request);
      }
      public virtual global::TronNet.Protocol.DelegatedResourceAccountIndex GetDelegatedResourceAccountIndex(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelegatedResourceAccountIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DelegatedResourceAccountIndex GetDelegatedResourceAccountIndex(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDelegatedResourceAccountIndex, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DelegatedResourceAccountIndex> GetDelegatedResourceAccountIndexAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelegatedResourceAccountIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DelegatedResourceAccountIndex> GetDelegatedResourceAccountIndexAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDelegatedResourceAccountIndex, null, options, request);
      }
      public virtual global::TronNet.Protocol.ProposalList ListProposals(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProposals(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ProposalList ListProposals(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProposals, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ProposalList> ListProposalsAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProposalsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ProposalList> ListProposalsAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProposals, null, options, request);
      }
      public virtual global::TronNet.Protocol.ProposalList GetPaginatedProposalList(global::TronNet.Protocol.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedProposalList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ProposalList GetPaginatedProposalList(global::TronNet.Protocol.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPaginatedProposalList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ProposalList> GetPaginatedProposalListAsync(global::TronNet.Protocol.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedProposalListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ProposalList> GetPaginatedProposalListAsync(global::TronNet.Protocol.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPaginatedProposalList, null, options, request);
      }
      public virtual global::TronNet.Protocol.Proposal GetProposalById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProposalById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Proposal GetProposalById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProposalById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Proposal> GetProposalByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProposalByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Proposal> GetProposalByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProposalById, null, options, request);
      }
      public virtual global::TronNet.Protocol.ExchangeList ListExchanges(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExchanges(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ExchangeList ListExchanges(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExchanges, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ExchangeList> ListExchangesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExchangesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ExchangeList> ListExchangesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExchanges, null, options, request);
      }
      public virtual global::TronNet.Protocol.ExchangeList GetPaginatedExchangeList(global::TronNet.Protocol.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedExchangeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ExchangeList GetPaginatedExchangeList(global::TronNet.Protocol.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPaginatedExchangeList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ExchangeList> GetPaginatedExchangeListAsync(global::TronNet.Protocol.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedExchangeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ExchangeList> GetPaginatedExchangeListAsync(global::TronNet.Protocol.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPaginatedExchangeList, null, options, request);
      }
      public virtual global::TronNet.Protocol.Exchange GetExchangeById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExchangeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Exchange GetExchangeById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExchangeById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Exchange> GetExchangeByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExchangeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Exchange> GetExchangeByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExchangeById, null, options, request);
      }
      public virtual global::TronNet.Protocol.ChainParameters GetChainParameters(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChainParameters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ChainParameters GetChainParameters(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChainParameters, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ChainParameters> GetChainParametersAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChainParametersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ChainParameters> GetChainParametersAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChainParameters, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueList(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueList(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueListAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueListAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetPaginatedAssetIssueList(global::TronNet.Protocol.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetPaginatedAssetIssueList(global::TronNet.Protocol.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPaginatedAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetPaginatedAssetIssueListAsync(global::TronNet.Protocol.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetPaginatedAssetIssueListAsync(global::TronNet.Protocol.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPaginatedAssetIssueList, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage TotalTransaction(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage TotalTransaction(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TotalTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> TotalTransactionAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> TotalTransactionAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TotalTransaction, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetNextMaintenanceTime(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextMaintenanceTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetNextMaintenanceTime(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNextMaintenanceTime, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetNextMaintenanceTimeAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextMaintenanceTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetNextMaintenanceTimeAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNextMaintenanceTime, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction GetTransactionSign(global::TronNet.Protocol.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Transaction GetTransactionSign(global::TronNet.Protocol.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionSign, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> GetTransactionSignAsync(global::TronNet.Protocol.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Please use GetTransactionSign2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> GetTransactionSignAsync(global::TronNet.Protocol.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionSign, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention GetTransactionSign2(global::TronNet.Protocol.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSign2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention GetTransactionSign2(global::TronNet.Protocol.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionSign2, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> GetTransactionSign2Async(global::TronNet.Protocol.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSign2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      ///Use this function instead of GetTransactionSign.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> GetTransactionSign2Async(global::TronNet.Protocol.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionSign2, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BytesMessage CreateAddress(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BytesMessage CreateAddress(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAddress, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> CreateAddressAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> CreateAddressAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAddress, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.EasyTransferResponse EasyTransferAsset(global::TronNet.Protocol.EasyTransferAssetMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.EasyTransferResponse EasyTransferAsset(global::TronNet.Protocol.EasyTransferAssetMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EasyTransferAsset, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.EasyTransferResponse> EasyTransferAssetAsync(global::TronNet.Protocol.EasyTransferAssetMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.EasyTransferResponse> EasyTransferAssetAsync(global::TronNet.Protocol.EasyTransferAssetMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EasyTransferAsset, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.EasyTransferResponse EasyTransferAssetByPrivate(global::TronNet.Protocol.EasyTransferAssetByPrivateMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferAssetByPrivate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.EasyTransferResponse EasyTransferAssetByPrivate(global::TronNet.Protocol.EasyTransferAssetByPrivateMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EasyTransferAssetByPrivate, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.EasyTransferResponse> EasyTransferAssetByPrivateAsync(global::TronNet.Protocol.EasyTransferAssetByPrivateMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferAssetByPrivateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.EasyTransferResponse> EasyTransferAssetByPrivateAsync(global::TronNet.Protocol.EasyTransferAssetByPrivateMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EasyTransferAssetByPrivate, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.EasyTransferResponse EasyTransfer(global::TronNet.Protocol.EasyTransferMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransfer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.EasyTransferResponse EasyTransfer(global::TronNet.Protocol.EasyTransferMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EasyTransfer, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.EasyTransferResponse> EasyTransferAsync(global::TronNet.Protocol.EasyTransferMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.EasyTransferResponse> EasyTransferAsync(global::TronNet.Protocol.EasyTransferMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EasyTransfer, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.EasyTransferResponse EasyTransferByPrivate(global::TronNet.Protocol.EasyTransferByPrivateMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferByPrivate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.EasyTransferResponse EasyTransferByPrivate(global::TronNet.Protocol.EasyTransferByPrivateMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EasyTransferByPrivate, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.EasyTransferResponse> EasyTransferByPrivateAsync(global::TronNet.Protocol.EasyTransferByPrivateMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EasyTransferByPrivateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.EasyTransferResponse> EasyTransferByPrivateAsync(global::TronNet.Protocol.EasyTransferByPrivateMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EasyTransferByPrivate, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.AddressPrKeyPairMessage GenerateAddress(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.AddressPrKeyPairMessage GenerateAddress(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAddress, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AddressPrKeyPairMessage> GenerateAddressAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AddressPrKeyPairMessage> GenerateAddressAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAddress, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionInfo GetTransactionInfoById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionInfo GetTransactionInfoById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionInfoById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionInfo> GetTransactionInfoByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionInfo> GetTransactionInfoByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionInfoById, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention AccountPermissionUpdate(global::TronNet.Protocol.AccountPermissionUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccountPermissionUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention AccountPermissionUpdate(global::TronNet.Protocol.AccountPermissionUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AccountPermissionUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> AccountPermissionUpdateAsync(global::TronNet.Protocol.AccountPermissionUpdateContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccountPermissionUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> AccountPermissionUpdateAsync(global::TronNet.Protocol.AccountPermissionUpdateContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AccountPermissionUpdate, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention AddSign(global::TronNet.Protocol.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention AddSign(global::TronNet.Protocol.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSign, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> AddSignAsync(global::TronNet.Protocol.TransactionSign request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> AddSignAsync(global::TronNet.Protocol.TransactionSign request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSign, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionSignWeight GetTransactionSignWeight(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSignWeight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionSignWeight GetTransactionSignWeight(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionSignWeight, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionSignWeight> GetTransactionSignWeightAsync(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionSignWeightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionSignWeight> GetTransactionSignWeightAsync(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionSignWeight, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionApprovedList GetTransactionApprovedList(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionApprovedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionApprovedList GetTransactionApprovedList(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionApprovedList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionApprovedList> GetTransactionApprovedListAsync(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionApprovedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionApprovedList> GetTransactionApprovedListAsync(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionApprovedList, null, options, request);
      }
      public virtual global::TronNet.Protocol.NodeInfo GetNodeInfo(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NodeInfo GetNodeInfo(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NodeInfo> GetNodeInfoAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NodeInfo> GetNodeInfoAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeInfo, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetRewardInfo(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRewardInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetRewardInfo(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRewardInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetRewardInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRewardInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetRewardInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRewardInfo, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetBrokerageInfo(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrokerageInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetBrokerageInfo(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBrokerageInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetBrokerageInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrokerageInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetBrokerageInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBrokerageInfo, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention UpdateBrokerage(global::TronNet.Protocol.UpdateBrokerageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBrokerage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention UpdateBrokerage(global::TronNet.Protocol.UpdateBrokerageContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBrokerage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateBrokerageAsync(global::TronNet.Protocol.UpdateBrokerageContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBrokerageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> UpdateBrokerageAsync(global::TronNet.Protocol.UpdateBrokerageContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBrokerage, null, options, request);
      }
      /// <summary>
      /// for shiededTransaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateShieldedTransaction(global::TronNet.Protocol.PrivateParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldedTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// for shiededTransaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionExtention CreateShieldedTransaction(global::TronNet.Protocol.PrivateParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateShieldedTransaction, null, options, request);
      }
      /// <summary>
      /// for shiededTransaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateShieldedTransactionAsync(global::TronNet.Protocol.PrivateParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldedTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// for shiededTransaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateShieldedTransactionAsync(global::TronNet.Protocol.PrivateParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateShieldedTransaction, null, options, request);
      }
      public virtual global::TronNet.Protocol.IncrementalMerkleVoucherInfo GetMerkleTreeVoucherInfo(global::TronNet.Protocol.OutputPointInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMerkleTreeVoucherInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.IncrementalMerkleVoucherInfo GetMerkleTreeVoucherInfo(global::TronNet.Protocol.OutputPointInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMerkleTreeVoucherInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.IncrementalMerkleVoucherInfo> GetMerkleTreeVoucherInfoAsync(global::TronNet.Protocol.OutputPointInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMerkleTreeVoucherInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.IncrementalMerkleVoucherInfo> GetMerkleTreeVoucherInfoAsync(global::TronNet.Protocol.OutputPointInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMerkleTreeVoucherInfo, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotes ScanNoteByIvk(global::TronNet.Protocol.IvkDecryptParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanNoteByIvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotes ScanNoteByIvk(global::TronNet.Protocol.IvkDecryptParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanNoteByIvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotes> ScanNoteByIvkAsync(global::TronNet.Protocol.IvkDecryptParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanNoteByIvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotes> ScanNoteByIvkAsync(global::TronNet.Protocol.IvkDecryptParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanNoteByIvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotesMarked ScanAndMarkNoteByIvk(global::TronNet.Protocol.IvkDecryptAndMarkParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanAndMarkNoteByIvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotesMarked ScanAndMarkNoteByIvk(global::TronNet.Protocol.IvkDecryptAndMarkParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanAndMarkNoteByIvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesMarked> ScanAndMarkNoteByIvkAsync(global::TronNet.Protocol.IvkDecryptAndMarkParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanAndMarkNoteByIvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesMarked> ScanAndMarkNoteByIvkAsync(global::TronNet.Protocol.IvkDecryptAndMarkParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanAndMarkNoteByIvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotes ScanNoteByOvk(global::TronNet.Protocol.OvkDecryptParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanNoteByOvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotes ScanNoteByOvk(global::TronNet.Protocol.OvkDecryptParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanNoteByOvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotes> ScanNoteByOvkAsync(global::TronNet.Protocol.OvkDecryptParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanNoteByOvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotes> ScanNoteByOvkAsync(global::TronNet.Protocol.OvkDecryptParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanNoteByOvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.BytesMessage GetSpendingKey(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpendingKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BytesMessage GetSpendingKey(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSpendingKey, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetSpendingKeyAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpendingKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetSpendingKeyAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSpendingKey, null, options, request);
      }
      public virtual global::TronNet.Protocol.ExpandedSpendingKeyMessage GetExpandedSpendingKey(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExpandedSpendingKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ExpandedSpendingKeyMessage GetExpandedSpendingKey(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExpandedSpendingKey, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ExpandedSpendingKeyMessage> GetExpandedSpendingKeyAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExpandedSpendingKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ExpandedSpendingKeyMessage> GetExpandedSpendingKeyAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExpandedSpendingKey, null, options, request);
      }
      public virtual global::TronNet.Protocol.BytesMessage GetAkFromAsk(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAkFromAsk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BytesMessage GetAkFromAsk(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAkFromAsk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetAkFromAskAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAkFromAskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetAkFromAskAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAkFromAsk, null, options, request);
      }
      public virtual global::TronNet.Protocol.BytesMessage GetNkFromNsk(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNkFromNsk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BytesMessage GetNkFromNsk(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNkFromNsk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetNkFromNskAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNkFromNskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetNkFromNskAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNkFromNsk, null, options, request);
      }
      public virtual global::TronNet.Protocol.IncomingViewingKeyMessage GetIncomingViewingKey(global::TronNet.Protocol.ViewingKeyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIncomingViewingKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.IncomingViewingKeyMessage GetIncomingViewingKey(global::TronNet.Protocol.ViewingKeyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIncomingViewingKey, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.IncomingViewingKeyMessage> GetIncomingViewingKeyAsync(global::TronNet.Protocol.ViewingKeyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIncomingViewingKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.IncomingViewingKeyMessage> GetIncomingViewingKeyAsync(global::TronNet.Protocol.ViewingKeyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIncomingViewingKey, null, options, request);
      }
      public virtual global::TronNet.Protocol.DiversifierMessage GetDiversifier(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDiversifier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DiversifierMessage GetDiversifier(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDiversifier, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DiversifierMessage> GetDiversifierAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDiversifierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DiversifierMessage> GetDiversifierAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDiversifier, null, options, request);
      }
      public virtual global::TronNet.Protocol.ShieldedAddressInfo GetNewShieldedAddress(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNewShieldedAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ShieldedAddressInfo GetNewShieldedAddress(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNewShieldedAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ShieldedAddressInfo> GetNewShieldedAddressAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNewShieldedAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ShieldedAddressInfo> GetNewShieldedAddressAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNewShieldedAddress, null, options, request);
      }
      public virtual global::TronNet.Protocol.PaymentAddressMessage GetZenPaymentAddress(global::TronNet.Protocol.IncomingViewingKeyDiversifierMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetZenPaymentAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.PaymentAddressMessage GetZenPaymentAddress(global::TronNet.Protocol.IncomingViewingKeyDiversifierMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetZenPaymentAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.PaymentAddressMessage> GetZenPaymentAddressAsync(global::TronNet.Protocol.IncomingViewingKeyDiversifierMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetZenPaymentAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.PaymentAddressMessage> GetZenPaymentAddressAsync(global::TronNet.Protocol.IncomingViewingKeyDiversifierMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetZenPaymentAddress, null, options, request);
      }
      public virtual global::TronNet.Protocol.BytesMessage GetRcm(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRcm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BytesMessage GetRcm(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRcm, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetRcmAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRcmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetRcmAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRcm, null, options, request);
      }
      public virtual global::TronNet.Protocol.SpendResult IsSpend(global::TronNet.Protocol.NoteParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsSpend(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.SpendResult IsSpend(global::TronNet.Protocol.NoteParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsSpend, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.SpendResult> IsSpendAsync(global::TronNet.Protocol.NoteParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsSpendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.SpendResult> IsSpendAsync(global::TronNet.Protocol.NoteParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsSpend, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention CreateShieldedTransactionWithoutSpendAuthSig(global::TronNet.Protocol.PrivateParametersWithoutAsk request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldedTransactionWithoutSpendAuthSig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention CreateShieldedTransactionWithoutSpendAuthSig(global::TronNet.Protocol.PrivateParametersWithoutAsk request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateShieldedTransactionWithoutSpendAuthSig, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateShieldedTransactionWithoutSpendAuthSigAsync(global::TronNet.Protocol.PrivateParametersWithoutAsk request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldedTransactionWithoutSpendAuthSigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateShieldedTransactionWithoutSpendAuthSigAsync(global::TronNet.Protocol.PrivateParametersWithoutAsk request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateShieldedTransactionWithoutSpendAuthSig, null, options, request);
      }
      public virtual global::TronNet.Protocol.BytesMessage GetShieldTransactionHash(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShieldTransactionHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BytesMessage GetShieldTransactionHash(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShieldTransactionHash, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetShieldTransactionHashAsync(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShieldTransactionHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetShieldTransactionHashAsync(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShieldTransactionHash, null, options, request);
      }
      public virtual global::TronNet.Protocol.BytesMessage CreateSpendAuthSig(global::TronNet.Protocol.SpendAuthSigParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpendAuthSig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BytesMessage CreateSpendAuthSig(global::TronNet.Protocol.SpendAuthSigParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSpendAuthSig, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> CreateSpendAuthSigAsync(global::TronNet.Protocol.SpendAuthSigParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpendAuthSigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> CreateSpendAuthSigAsync(global::TronNet.Protocol.SpendAuthSigParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSpendAuthSig, null, options, request);
      }
      public virtual global::TronNet.Protocol.BytesMessage CreateShieldNullifier(global::TronNet.Protocol.NfParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldNullifier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BytesMessage CreateShieldNullifier(global::TronNet.Protocol.NfParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateShieldNullifier, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> CreateShieldNullifierAsync(global::TronNet.Protocol.NfParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldNullifierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> CreateShieldNullifierAsync(global::TronNet.Protocol.NfParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateShieldNullifier, null, options, request);
      }
      /// <summary>
      ///for shielded contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.ShieldedTRC20Parameters CreateShieldedContractParameters(global::TronNet.Protocol.PrivateShieldedTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldedContractParameters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///for shielded contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.ShieldedTRC20Parameters CreateShieldedContractParameters(global::TronNet.Protocol.PrivateShieldedTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateShieldedContractParameters, null, options, request);
      }
      /// <summary>
      ///for shielded contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ShieldedTRC20Parameters> CreateShieldedContractParametersAsync(global::TronNet.Protocol.PrivateShieldedTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldedContractParametersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///for shielded contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ShieldedTRC20Parameters> CreateShieldedContractParametersAsync(global::TronNet.Protocol.PrivateShieldedTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateShieldedContractParameters, null, options, request);
      }
      public virtual global::TronNet.Protocol.ShieldedTRC20Parameters CreateShieldedContractParametersWithoutAsk(global::TronNet.Protocol.PrivateShieldedTRC20ParametersWithoutAsk request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldedContractParametersWithoutAsk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ShieldedTRC20Parameters CreateShieldedContractParametersWithoutAsk(global::TronNet.Protocol.PrivateShieldedTRC20ParametersWithoutAsk request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateShieldedContractParametersWithoutAsk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ShieldedTRC20Parameters> CreateShieldedContractParametersWithoutAskAsync(global::TronNet.Protocol.PrivateShieldedTRC20ParametersWithoutAsk request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateShieldedContractParametersWithoutAskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ShieldedTRC20Parameters> CreateShieldedContractParametersWithoutAskAsync(global::TronNet.Protocol.PrivateShieldedTRC20ParametersWithoutAsk request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateShieldedContractParametersWithoutAsk, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotesTRC20 ScanShieldedTRC20NotesByIvk(global::TronNet.Protocol.IvkDecryptTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanShieldedTRC20NotesByIvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotesTRC20 ScanShieldedTRC20NotesByIvk(global::TronNet.Protocol.IvkDecryptTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanShieldedTRC20NotesByIvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesTRC20> ScanShieldedTRC20NotesByIvkAsync(global::TronNet.Protocol.IvkDecryptTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanShieldedTRC20NotesByIvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesTRC20> ScanShieldedTRC20NotesByIvkAsync(global::TronNet.Protocol.IvkDecryptTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanShieldedTRC20NotesByIvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotesTRC20 ScanShieldedTRC20NotesByOvk(global::TronNet.Protocol.OvkDecryptTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanShieldedTRC20NotesByOvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotesTRC20 ScanShieldedTRC20NotesByOvk(global::TronNet.Protocol.OvkDecryptTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanShieldedTRC20NotesByOvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesTRC20> ScanShieldedTRC20NotesByOvkAsync(global::TronNet.Protocol.OvkDecryptTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanShieldedTRC20NotesByOvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesTRC20> ScanShieldedTRC20NotesByOvkAsync(global::TronNet.Protocol.OvkDecryptTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanShieldedTRC20NotesByOvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.NullifierResult IsShieldedTRC20ContractNoteSpent(global::TronNet.Protocol.NfTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsShieldedTRC20ContractNoteSpent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NullifierResult IsShieldedTRC20ContractNoteSpent(global::TronNet.Protocol.NfTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsShieldedTRC20ContractNoteSpent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NullifierResult> IsShieldedTRC20ContractNoteSpentAsync(global::TronNet.Protocol.NfTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsShieldedTRC20ContractNoteSpentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NullifierResult> IsShieldedTRC20ContractNoteSpentAsync(global::TronNet.Protocol.NfTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsShieldedTRC20ContractNoteSpent, null, options, request);
      }
      public virtual global::TronNet.Protocol.BytesMessage GetTriggerInputForShieldedTRC20Contract(global::TronNet.Protocol.ShieldedTRC20TriggerContractParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTriggerInputForShieldedTRC20Contract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.BytesMessage GetTriggerInputForShieldedTRC20Contract(global::TronNet.Protocol.ShieldedTRC20TriggerContractParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTriggerInputForShieldedTRC20Contract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetTriggerInputForShieldedTRC20ContractAsync(global::TronNet.Protocol.ShieldedTRC20TriggerContractParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTriggerInputForShieldedTRC20ContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BytesMessage> GetTriggerInputForShieldedTRC20ContractAsync(global::TronNet.Protocol.ShieldedTRC20TriggerContractParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTriggerInputForShieldedTRC20Contract, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention CreateCommonTransaction(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCommonTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention CreateCommonTransaction(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCommonTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateCommonTransactionAsync(global::TronNet.Protocol.Transaction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCommonTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> CreateCommonTransactionAsync(global::TronNet.Protocol.Transaction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCommonTransaction, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionInfoList GetTransactionInfoByBlockNum(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoByBlockNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionInfoList GetTransactionInfoByBlockNum(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionInfoByBlockNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionInfoList> GetTransactionInfoByBlockNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoByBlockNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionInfoList> GetTransactionInfoByBlockNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionInfoByBlockNum, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetBurnTrx(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBurnTrx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetBurnTrx(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBurnTrx, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetBurnTrxAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBurnTrxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetBurnTrxAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBurnTrx, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletClient(configuration);
      }
    }

  }
  public static partial class WalletSolidity
  {
    static readonly string __ServiceName = "protocol.WalletSolidity";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::TronNet.Protocol.Account> __Marshaller_protocol_Account = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Account.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.EmptyMessage> __Marshaller_protocol_EmptyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EmptyMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.WitnessList> __Marshaller_protocol_WitnessList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.WitnessList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AssetIssueList> __Marshaller_protocol_AssetIssueList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AssetIssueList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.PaginatedMessage> __Marshaller_protocol_PaginatedMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.PaginatedMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BytesMessage> __Marshaller_protocol_BytesMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BytesMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AssetIssueContract> __Marshaller_protocol_AssetIssueContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AssetIssueContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Block> __Marshaller_protocol_Block = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Block.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BlockExtention> __Marshaller_protocol_BlockExtention = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BlockExtention.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NumberMessage> __Marshaller_protocol_NumberMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NumberMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DelegatedResourceMessage> __Marshaller_protocol_DelegatedResourceMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DelegatedResourceMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DelegatedResourceList> __Marshaller_protocol_DelegatedResourceList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DelegatedResourceList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DelegatedResourceAccountIndex> __Marshaller_protocol_DelegatedResourceAccountIndex = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DelegatedResourceAccountIndex.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Exchange> __Marshaller_protocol_Exchange = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Exchange.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.ExchangeList> __Marshaller_protocol_ExchangeList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.ExchangeList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Transaction> __Marshaller_protocol_Transaction = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Transaction.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionInfo> __Marshaller_protocol_TransactionInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionInfo.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.AddressPrKeyPairMessage> __Marshaller_protocol_AddressPrKeyPairMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AddressPrKeyPairMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.OutputPointInfo> __Marshaller_protocol_OutputPointInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.OutputPointInfo.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IncrementalMerkleVoucherInfo> __Marshaller_protocol_IncrementalMerkleVoucherInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IncrementalMerkleVoucherInfo.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IvkDecryptParameters> __Marshaller_protocol_IvkDecryptParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IvkDecryptParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DecryptNotes> __Marshaller_protocol_DecryptNotes = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DecryptNotes.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IvkDecryptAndMarkParameters> __Marshaller_protocol_IvkDecryptAndMarkParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IvkDecryptAndMarkParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DecryptNotesMarked> __Marshaller_protocol_DecryptNotesMarked = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DecryptNotesMarked.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.OvkDecryptParameters> __Marshaller_protocol_OvkDecryptParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.OvkDecryptParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NoteParameters> __Marshaller_protocol_NoteParameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NoteParameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.SpendResult> __Marshaller_protocol_SpendResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.SpendResult.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.IvkDecryptTRC20Parameters> __Marshaller_protocol_IvkDecryptTRC20Parameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.IvkDecryptTRC20Parameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DecryptNotesTRC20> __Marshaller_protocol_DecryptNotesTRC20 = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DecryptNotesTRC20.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.OvkDecryptTRC20Parameters> __Marshaller_protocol_OvkDecryptTRC20Parameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.OvkDecryptTRC20Parameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NfTRC20Parameters> __Marshaller_protocol_NfTRC20Parameters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NfTRC20Parameters.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NullifierResult> __Marshaller_protocol_NullifierResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NullifierResult.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TriggerSmartContract> __Marshaller_protocol_TriggerSmartContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TriggerSmartContract.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionExtention> __Marshaller_protocol_TransactionExtention = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionExtention.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionInfoList> __Marshaller_protocol_TransactionInfoList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionInfoList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketOrder> __Marshaller_protocol_MarketOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketOrder.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketOrderList> __Marshaller_protocol_MarketOrderList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketOrderList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketOrderPair> __Marshaller_protocol_MarketOrderPair = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketOrderPair.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketPriceList> __Marshaller_protocol_MarketPriceList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketPriceList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MarketOrderPairList> __Marshaller_protocol_MarketOrderPairList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MarketOrderPairList.Parser));

    static readonly grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.Account> __Method_GetAccount = new grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_protocol_Account,
        __Marshaller_protocol_Account);

    static readonly grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.Account> __Method_GetAccountById = new grpc::Method<global::TronNet.Protocol.Account, global::TronNet.Protocol.Account>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountById",
        __Marshaller_protocol_Account,
        __Marshaller_protocol_Account);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.WitnessList> __Method_ListWitnesses = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.WitnessList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWitnesses",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_WitnessList);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.AssetIssueList> __Method_GetAssetIssueList = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueList",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_AssetIssueList);

    static readonly grpc::Method<global::TronNet.Protocol.PaginatedMessage, global::TronNet.Protocol.AssetIssueList> __Method_GetPaginatedAssetIssueList = new grpc::Method<global::TronNet.Protocol.PaginatedMessage, global::TronNet.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPaginatedAssetIssueList",
        __Marshaller_protocol_PaginatedMessage,
        __Marshaller_protocol_AssetIssueList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueContract> __Method_GetAssetIssueByName = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueContract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueByName",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_AssetIssueContract);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueList> __Method_GetAssetIssueListByName = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueListByName",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_AssetIssueList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueContract> __Method_GetAssetIssueById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.AssetIssueContract>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetIssueById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_AssetIssueContract);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.Block> __Method_GetNowBlock = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_Block);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BlockExtention> __Method_GetNowBlock2 = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BlockExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock2",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_BlockExtention);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.Block> __Method_GetBlockByNum = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_Block);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.BlockExtention> __Method_GetBlockByNum2 = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.BlockExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum2",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_BlockExtention);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.NumberMessage> __Method_GetTransactionCountByBlockNum = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionCountByBlockNum",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_NumberMessage);

    static readonly grpc::Method<global::TronNet.Protocol.DelegatedResourceMessage, global::TronNet.Protocol.DelegatedResourceList> __Method_GetDelegatedResource = new grpc::Method<global::TronNet.Protocol.DelegatedResourceMessage, global::TronNet.Protocol.DelegatedResourceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDelegatedResource",
        __Marshaller_protocol_DelegatedResourceMessage,
        __Marshaller_protocol_DelegatedResourceList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.DelegatedResourceAccountIndex> __Method_GetDelegatedResourceAccountIndex = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.DelegatedResourceAccountIndex>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDelegatedResourceAccountIndex",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_DelegatedResourceAccountIndex);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Exchange> __Method_GetExchangeById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Exchange>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExchangeById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_Exchange);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ExchangeList> __Method_ListExchanges = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.ExchangeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExchanges",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_ExchangeList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Transaction> __Method_GetTransactionById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_Transaction);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.TransactionInfo> __Method_GetTransactionInfoById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.TransactionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionInfoById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_TransactionInfo);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.AddressPrKeyPairMessage> __Method_GenerateAddress = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.AddressPrKeyPairMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAddress",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_AddressPrKeyPairMessage);

    static readonly grpc::Method<global::TronNet.Protocol.OutputPointInfo, global::TronNet.Protocol.IncrementalMerkleVoucherInfo> __Method_GetMerkleTreeVoucherInfo = new grpc::Method<global::TronNet.Protocol.OutputPointInfo, global::TronNet.Protocol.IncrementalMerkleVoucherInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMerkleTreeVoucherInfo",
        __Marshaller_protocol_OutputPointInfo,
        __Marshaller_protocol_IncrementalMerkleVoucherInfo);

    static readonly grpc::Method<global::TronNet.Protocol.IvkDecryptParameters, global::TronNet.Protocol.DecryptNotes> __Method_ScanNoteByIvk = new grpc::Method<global::TronNet.Protocol.IvkDecryptParameters, global::TronNet.Protocol.DecryptNotes>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanNoteByIvk",
        __Marshaller_protocol_IvkDecryptParameters,
        __Marshaller_protocol_DecryptNotes);

    static readonly grpc::Method<global::TronNet.Protocol.IvkDecryptAndMarkParameters, global::TronNet.Protocol.DecryptNotesMarked> __Method_ScanAndMarkNoteByIvk = new grpc::Method<global::TronNet.Protocol.IvkDecryptAndMarkParameters, global::TronNet.Protocol.DecryptNotesMarked>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanAndMarkNoteByIvk",
        __Marshaller_protocol_IvkDecryptAndMarkParameters,
        __Marshaller_protocol_DecryptNotesMarked);

    static readonly grpc::Method<global::TronNet.Protocol.OvkDecryptParameters, global::TronNet.Protocol.DecryptNotes> __Method_ScanNoteByOvk = new grpc::Method<global::TronNet.Protocol.OvkDecryptParameters, global::TronNet.Protocol.DecryptNotes>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanNoteByOvk",
        __Marshaller_protocol_OvkDecryptParameters,
        __Marshaller_protocol_DecryptNotes);

    static readonly grpc::Method<global::TronNet.Protocol.NoteParameters, global::TronNet.Protocol.SpendResult> __Method_IsSpend = new grpc::Method<global::TronNet.Protocol.NoteParameters, global::TronNet.Protocol.SpendResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsSpend",
        __Marshaller_protocol_NoteParameters,
        __Marshaller_protocol_SpendResult);

    static readonly grpc::Method<global::TronNet.Protocol.IvkDecryptTRC20Parameters, global::TronNet.Protocol.DecryptNotesTRC20> __Method_ScanShieldedTRC20NotesByIvk = new grpc::Method<global::TronNet.Protocol.IvkDecryptTRC20Parameters, global::TronNet.Protocol.DecryptNotesTRC20>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanShieldedTRC20NotesByIvk",
        __Marshaller_protocol_IvkDecryptTRC20Parameters,
        __Marshaller_protocol_DecryptNotesTRC20);

    static readonly grpc::Method<global::TronNet.Protocol.OvkDecryptTRC20Parameters, global::TronNet.Protocol.DecryptNotesTRC20> __Method_ScanShieldedTRC20NotesByOvk = new grpc::Method<global::TronNet.Protocol.OvkDecryptTRC20Parameters, global::TronNet.Protocol.DecryptNotesTRC20>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanShieldedTRC20NotesByOvk",
        __Marshaller_protocol_OvkDecryptTRC20Parameters,
        __Marshaller_protocol_DecryptNotesTRC20);

    static readonly grpc::Method<global::TronNet.Protocol.NfTRC20Parameters, global::TronNet.Protocol.NullifierResult> __Method_IsShieldedTRC20ContractNoteSpent = new grpc::Method<global::TronNet.Protocol.NfTRC20Parameters, global::TronNet.Protocol.NullifierResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsShieldedTRC20ContractNoteSpent",
        __Marshaller_protocol_NfTRC20Parameters,
        __Marshaller_protocol_NullifierResult);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.NumberMessage> __Method_GetRewardInfo = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRewardInfo",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_NumberMessage);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.NumberMessage> __Method_GetBrokerageInfo = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBrokerageInfo",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_NumberMessage);

    static readonly grpc::Method<global::TronNet.Protocol.TriggerSmartContract, global::TronNet.Protocol.TransactionExtention> __Method_TriggerConstantContract = new grpc::Method<global::TronNet.Protocol.TriggerSmartContract, global::TronNet.Protocol.TransactionExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TriggerConstantContract",
        __Marshaller_protocol_TriggerSmartContract,
        __Marshaller_protocol_TransactionExtention);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.TransactionInfoList> __Method_GetTransactionInfoByBlockNum = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.TransactionInfoList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionInfoByBlockNum",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_TransactionInfoList);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.MarketOrder> __Method_GetMarketOrderById = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.MarketOrder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketOrderById",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_MarketOrder);

    static readonly grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.MarketOrderList> __Method_GetMarketOrderByAccount = new grpc::Method<global::TronNet.Protocol.BytesMessage, global::TronNet.Protocol.MarketOrderList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketOrderByAccount",
        __Marshaller_protocol_BytesMessage,
        __Marshaller_protocol_MarketOrderList);

    static readonly grpc::Method<global::TronNet.Protocol.MarketOrderPair, global::TronNet.Protocol.MarketPriceList> __Method_GetMarketPriceByPair = new grpc::Method<global::TronNet.Protocol.MarketOrderPair, global::TronNet.Protocol.MarketPriceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketPriceByPair",
        __Marshaller_protocol_MarketOrderPair,
        __Marshaller_protocol_MarketPriceList);

    static readonly grpc::Method<global::TronNet.Protocol.MarketOrderPair, global::TronNet.Protocol.MarketOrderList> __Method_GetMarketOrderListByPair = new grpc::Method<global::TronNet.Protocol.MarketOrderPair, global::TronNet.Protocol.MarketOrderList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketOrderListByPair",
        __Marshaller_protocol_MarketOrderPair,
        __Marshaller_protocol_MarketOrderList);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.MarketOrderPairList> __Method_GetMarketPairList = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.MarketOrderPairList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMarketPairList",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_MarketOrderPairList);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NumberMessage> __Method_GetBurnTrx = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.NumberMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBurnTrx",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_NumberMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TronNet.Protocol.ApiReflection.Descriptor.Services[1]; }
    }

    /// <summary>Client for WalletSolidity</summary>
    public partial class WalletSolidityClient : grpc::ClientBase<WalletSolidityClient>
    {
      /// <summary>Creates a new client for WalletSolidity</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletSolidityClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WalletSolidity that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletSolidityClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletSolidityClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletSolidityClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::TronNet.Protocol.Account GetAccount(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Account GetAccount(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Account> GetAccountAsync(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Account> GetAccountAsync(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual global::TronNet.Protocol.Account GetAccountById(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Account GetAccountById(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Account> GetAccountByIdAsync(global::TronNet.Protocol.Account request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Account> GetAccountByIdAsync(global::TronNet.Protocol.Account request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountById, null, options, request);
      }
      public virtual global::TronNet.Protocol.WitnessList ListWitnesses(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnesses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.WitnessList ListWitnesses(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.WitnessList> ListWitnessesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWitnessesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.WitnessList> ListWitnessesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWitnesses, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueList(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueList(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueListAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueListAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueList, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetPaginatedAssetIssueList(global::TronNet.Protocol.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedAssetIssueList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetPaginatedAssetIssueList(global::TronNet.Protocol.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPaginatedAssetIssueList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetPaginatedAssetIssueListAsync(global::TronNet.Protocol.PaginatedMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPaginatedAssetIssueListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetPaginatedAssetIssueListAsync(global::TronNet.Protocol.PaginatedMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPaginatedAssetIssueList, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueContract GetAssetIssueByName(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueContract GetAssetIssueByName(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueContract> GetAssetIssueByNameAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueContract> GetAssetIssueByNameAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueByName, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueListByName(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueList GetAssetIssueListByName(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueListByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueListByNameAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueListByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueList> GetAssetIssueListByNameAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueListByName, null, options, request);
      }
      public virtual global::TronNet.Protocol.AssetIssueContract GetAssetIssueById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.AssetIssueContract GetAssetIssueById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetIssueById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueContract> GetAssetIssueByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetIssueByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AssetIssueContract> GetAssetIssueByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetIssueById, null, options, request);
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Block GetNowBlock(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Block GetNowBlock(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetNowBlockAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetNowBlock2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetNowBlockAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockExtention GetNowBlock2(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockExtention GetNowBlock2(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockExtention> GetNowBlock2Async(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetNowBlock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockExtention> GetNowBlock2Async(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock2, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Block GetBlockByNum(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.Block GetBlockByNum(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetBlockByNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetBlockByNum2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetBlockByNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockExtention GetBlockByNum2(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockExtention GetBlockByNum2(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockExtention> GetBlockByNum2Async(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetBlockByNum.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockExtention> GetBlockByNum2Async(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum2, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetTransactionCountByBlockNum(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionCountByBlockNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetTransactionCountByBlockNum(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionCountByBlockNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetTransactionCountByBlockNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionCountByBlockNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetTransactionCountByBlockNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionCountByBlockNum, null, options, request);
      }
      public virtual global::TronNet.Protocol.DelegatedResourceList GetDelegatedResource(global::TronNet.Protocol.DelegatedResourceMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelegatedResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DelegatedResourceList GetDelegatedResource(global::TronNet.Protocol.DelegatedResourceMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDelegatedResource, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DelegatedResourceList> GetDelegatedResourceAsync(global::TronNet.Protocol.DelegatedResourceMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelegatedResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DelegatedResourceList> GetDelegatedResourceAsync(global::TronNet.Protocol.DelegatedResourceMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDelegatedResource, null, options, request);
      }
      public virtual global::TronNet.Protocol.DelegatedResourceAccountIndex GetDelegatedResourceAccountIndex(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelegatedResourceAccountIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DelegatedResourceAccountIndex GetDelegatedResourceAccountIndex(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDelegatedResourceAccountIndex, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DelegatedResourceAccountIndex> GetDelegatedResourceAccountIndexAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelegatedResourceAccountIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DelegatedResourceAccountIndex> GetDelegatedResourceAccountIndexAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDelegatedResourceAccountIndex, null, options, request);
      }
      public virtual global::TronNet.Protocol.Exchange GetExchangeById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExchangeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Exchange GetExchangeById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExchangeById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Exchange> GetExchangeByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExchangeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Exchange> GetExchangeByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExchangeById, null, options, request);
      }
      public virtual global::TronNet.Protocol.ExchangeList ListExchanges(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExchanges(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.ExchangeList ListExchanges(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExchanges, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ExchangeList> ListExchangesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExchangesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.ExchangeList> ListExchangesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExchanges, null, options, request);
      }
      public virtual global::TronNet.Protocol.Transaction GetTransactionById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Transaction GetTransactionById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> GetTransactionByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Transaction> GetTransactionByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionInfo GetTransactionInfoById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionInfo GetTransactionInfoById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionInfoById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionInfo> GetTransactionInfoByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionInfo> GetTransactionInfoByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionInfoById, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.AddressPrKeyPairMessage GenerateAddress(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.AddressPrKeyPairMessage GenerateAddress(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAddress, null, options, request);
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AddressPrKeyPairMessage> GenerateAddressAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Warning: do not invoke this interface provided by others.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.AddressPrKeyPairMessage> GenerateAddressAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAddress, null, options, request);
      }
      public virtual global::TronNet.Protocol.IncrementalMerkleVoucherInfo GetMerkleTreeVoucherInfo(global::TronNet.Protocol.OutputPointInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMerkleTreeVoucherInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.IncrementalMerkleVoucherInfo GetMerkleTreeVoucherInfo(global::TronNet.Protocol.OutputPointInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMerkleTreeVoucherInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.IncrementalMerkleVoucherInfo> GetMerkleTreeVoucherInfoAsync(global::TronNet.Protocol.OutputPointInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMerkleTreeVoucherInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.IncrementalMerkleVoucherInfo> GetMerkleTreeVoucherInfoAsync(global::TronNet.Protocol.OutputPointInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMerkleTreeVoucherInfo, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotes ScanNoteByIvk(global::TronNet.Protocol.IvkDecryptParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanNoteByIvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotes ScanNoteByIvk(global::TronNet.Protocol.IvkDecryptParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanNoteByIvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotes> ScanNoteByIvkAsync(global::TronNet.Protocol.IvkDecryptParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanNoteByIvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotes> ScanNoteByIvkAsync(global::TronNet.Protocol.IvkDecryptParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanNoteByIvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotesMarked ScanAndMarkNoteByIvk(global::TronNet.Protocol.IvkDecryptAndMarkParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanAndMarkNoteByIvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotesMarked ScanAndMarkNoteByIvk(global::TronNet.Protocol.IvkDecryptAndMarkParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanAndMarkNoteByIvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesMarked> ScanAndMarkNoteByIvkAsync(global::TronNet.Protocol.IvkDecryptAndMarkParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanAndMarkNoteByIvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesMarked> ScanAndMarkNoteByIvkAsync(global::TronNet.Protocol.IvkDecryptAndMarkParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanAndMarkNoteByIvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotes ScanNoteByOvk(global::TronNet.Protocol.OvkDecryptParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanNoteByOvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotes ScanNoteByOvk(global::TronNet.Protocol.OvkDecryptParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanNoteByOvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotes> ScanNoteByOvkAsync(global::TronNet.Protocol.OvkDecryptParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanNoteByOvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotes> ScanNoteByOvkAsync(global::TronNet.Protocol.OvkDecryptParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanNoteByOvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.SpendResult IsSpend(global::TronNet.Protocol.NoteParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsSpend(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.SpendResult IsSpend(global::TronNet.Protocol.NoteParameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsSpend, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.SpendResult> IsSpendAsync(global::TronNet.Protocol.NoteParameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsSpendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.SpendResult> IsSpendAsync(global::TronNet.Protocol.NoteParameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsSpend, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotesTRC20 ScanShieldedTRC20NotesByIvk(global::TronNet.Protocol.IvkDecryptTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanShieldedTRC20NotesByIvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotesTRC20 ScanShieldedTRC20NotesByIvk(global::TronNet.Protocol.IvkDecryptTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanShieldedTRC20NotesByIvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesTRC20> ScanShieldedTRC20NotesByIvkAsync(global::TronNet.Protocol.IvkDecryptTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanShieldedTRC20NotesByIvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesTRC20> ScanShieldedTRC20NotesByIvkAsync(global::TronNet.Protocol.IvkDecryptTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanShieldedTRC20NotesByIvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.DecryptNotesTRC20 ScanShieldedTRC20NotesByOvk(global::TronNet.Protocol.OvkDecryptTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanShieldedTRC20NotesByOvk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DecryptNotesTRC20 ScanShieldedTRC20NotesByOvk(global::TronNet.Protocol.OvkDecryptTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanShieldedTRC20NotesByOvk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesTRC20> ScanShieldedTRC20NotesByOvkAsync(global::TronNet.Protocol.OvkDecryptTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanShieldedTRC20NotesByOvkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DecryptNotesTRC20> ScanShieldedTRC20NotesByOvkAsync(global::TronNet.Protocol.OvkDecryptTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanShieldedTRC20NotesByOvk, null, options, request);
      }
      public virtual global::TronNet.Protocol.NullifierResult IsShieldedTRC20ContractNoteSpent(global::TronNet.Protocol.NfTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsShieldedTRC20ContractNoteSpent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NullifierResult IsShieldedTRC20ContractNoteSpent(global::TronNet.Protocol.NfTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsShieldedTRC20ContractNoteSpent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NullifierResult> IsShieldedTRC20ContractNoteSpentAsync(global::TronNet.Protocol.NfTRC20Parameters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsShieldedTRC20ContractNoteSpentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NullifierResult> IsShieldedTRC20ContractNoteSpentAsync(global::TronNet.Protocol.NfTRC20Parameters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsShieldedTRC20ContractNoteSpent, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetRewardInfo(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRewardInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetRewardInfo(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRewardInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetRewardInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRewardInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetRewardInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRewardInfo, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetBrokerageInfo(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrokerageInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetBrokerageInfo(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBrokerageInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetBrokerageInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBrokerageInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetBrokerageInfoAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBrokerageInfo, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionExtention TriggerConstantContract(global::TronNet.Protocol.TriggerSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerConstantContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionExtention TriggerConstantContract(global::TronNet.Protocol.TriggerSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TriggerConstantContract, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> TriggerConstantContractAsync(global::TronNet.Protocol.TriggerSmartContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerConstantContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionExtention> TriggerConstantContractAsync(global::TronNet.Protocol.TriggerSmartContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TriggerConstantContract, null, options, request);
      }
      public virtual global::TronNet.Protocol.TransactionInfoList GetTransactionInfoByBlockNum(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoByBlockNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.TransactionInfoList GetTransactionInfoByBlockNum(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionInfoByBlockNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionInfoList> GetTransactionInfoByBlockNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionInfoByBlockNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionInfoList> GetTransactionInfoByBlockNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionInfoByBlockNum, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketOrder GetMarketOrderById(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketOrder GetMarketOrderById(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketOrderById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrder> GetMarketOrderByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrder> GetMarketOrderByIdAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketOrderById, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketOrderList GetMarketOrderByAccount(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderByAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketOrderList GetMarketOrderByAccount(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketOrderByAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderList> GetMarketOrderByAccountAsync(global::TronNet.Protocol.BytesMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderByAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderList> GetMarketOrderByAccountAsync(global::TronNet.Protocol.BytesMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketOrderByAccount, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketPriceList GetMarketPriceByPair(global::TronNet.Protocol.MarketOrderPair request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketPriceByPair(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketPriceList GetMarketPriceByPair(global::TronNet.Protocol.MarketOrderPair request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketPriceByPair, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketPriceList> GetMarketPriceByPairAsync(global::TronNet.Protocol.MarketOrderPair request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketPriceByPairAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketPriceList> GetMarketPriceByPairAsync(global::TronNet.Protocol.MarketOrderPair request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketPriceByPair, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketOrderList GetMarketOrderListByPair(global::TronNet.Protocol.MarketOrderPair request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderListByPair(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketOrderList GetMarketOrderListByPair(global::TronNet.Protocol.MarketOrderPair request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketOrderListByPair, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderList> GetMarketOrderListByPairAsync(global::TronNet.Protocol.MarketOrderPair request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketOrderListByPairAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderList> GetMarketOrderListByPairAsync(global::TronNet.Protocol.MarketOrderPair request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketOrderListByPair, null, options, request);
      }
      public virtual global::TronNet.Protocol.MarketOrderPairList GetMarketPairList(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketPairList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MarketOrderPairList GetMarketPairList(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMarketPairList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderPairList> GetMarketPairListAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMarketPairListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MarketOrderPairList> GetMarketPairListAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMarketPairList, null, options, request);
      }
      public virtual global::TronNet.Protocol.NumberMessage GetBurnTrx(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBurnTrx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.NumberMessage GetBurnTrx(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBurnTrx, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetBurnTrxAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBurnTrxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.NumberMessage> GetBurnTrxAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBurnTrx, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletSolidityClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletSolidityClient(configuration);
      }
    }

  }
  public static partial class WalletExtension
  {
    static readonly string __ServiceName = "protocol.WalletExtension";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::TronNet.Protocol.AccountPaginated> __Marshaller_protocol_AccountPaginated = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.AccountPaginated.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionList> __Marshaller_protocol_TransactionList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionList.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.TransactionListExtention> __Marshaller_protocol_TransactionListExtention = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.TransactionListExtention.Parser));

    static readonly grpc::Method<global::TronNet.Protocol.AccountPaginated, global::TronNet.Protocol.TransactionList> __Method_GetTransactionsFromThis = new grpc::Method<global::TronNet.Protocol.AccountPaginated, global::TronNet.Protocol.TransactionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsFromThis",
        __Marshaller_protocol_AccountPaginated,
        __Marshaller_protocol_TransactionList);

    static readonly grpc::Method<global::TronNet.Protocol.AccountPaginated, global::TronNet.Protocol.TransactionListExtention> __Method_GetTransactionsFromThis2 = new grpc::Method<global::TronNet.Protocol.AccountPaginated, global::TronNet.Protocol.TransactionListExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsFromThis2",
        __Marshaller_protocol_AccountPaginated,
        __Marshaller_protocol_TransactionListExtention);

    static readonly grpc::Method<global::TronNet.Protocol.AccountPaginated, global::TronNet.Protocol.TransactionList> __Method_GetTransactionsToThis = new grpc::Method<global::TronNet.Protocol.AccountPaginated, global::TronNet.Protocol.TransactionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsToThis",
        __Marshaller_protocol_AccountPaginated,
        __Marshaller_protocol_TransactionList);

    static readonly grpc::Method<global::TronNet.Protocol.AccountPaginated, global::TronNet.Protocol.TransactionListExtention> __Method_GetTransactionsToThis2 = new grpc::Method<global::TronNet.Protocol.AccountPaginated, global::TronNet.Protocol.TransactionListExtention>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionsToThis2",
        __Marshaller_protocol_AccountPaginated,
        __Marshaller_protocol_TransactionListExtention);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TronNet.Protocol.ApiReflection.Descriptor.Services[2]; }
    }

    /// <summary>Client for WalletExtension</summary>
    public partial class WalletExtensionClient : grpc::ClientBase<WalletExtensionClient>
    {
      /// <summary>Creates a new client for WalletExtension</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WalletExtensionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WalletExtension that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WalletExtensionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WalletExtensionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WalletExtensionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionList GetTransactionsFromThis(global::TronNet.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThis(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionList GetTransactionsFromThis(global::TronNet.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsFromThis, null, options, request);
      }
      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionList> GetTransactionsFromThisAsync(global::TronNet.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThisAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetTransactionsFromThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionList> GetTransactionsFromThisAsync(global::TronNet.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsFromThis, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionListExtention GetTransactionsFromThis2(global::TronNet.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThis2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionListExtention GetTransactionsFromThis2(global::TronNet.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsFromThis2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionListExtention> GetTransactionsFromThis2Async(global::TronNet.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsFromThis2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetTransactionsFromThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionListExtention> GetTransactionsFromThis2Async(global::TronNet.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsFromThis2, null, options, request);
      }
      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionList GetTransactionsToThis(global::TronNet.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThis(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionList GetTransactionsToThis(global::TronNet.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsToThis, null, options, request);
      }
      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionList> GetTransactionsToThisAsync(global::TronNet.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThisAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Please use GetTransactionsToThis2 instead of this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionList> GetTransactionsToThisAsync(global::TronNet.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsToThis, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionListExtention GetTransactionsToThis2(global::TronNet.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThis2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.TransactionListExtention GetTransactionsToThis2(global::TronNet.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionsToThis2, null, options, request);
      }
      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionListExtention> GetTransactionsToThis2Async(global::TronNet.Protocol.AccountPaginated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsToThis2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Use this function instead of GetTransactionsToThis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.TransactionListExtention> GetTransactionsToThis2Async(global::TronNet.Protocol.AccountPaginated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionsToThis2, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WalletExtensionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WalletExtensionClient(configuration);
      }
    }

  }
  /// <summary>
  /// the api of tron's db
  /// </summary>
  public static partial class Database
  {
    static readonly string __ServiceName = "protocol.Database";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::TronNet.Protocol.EmptyMessage> __Marshaller_protocol_EmptyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EmptyMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.BlockReference> __Marshaller_protocol_BlockReference = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.BlockReference.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.DynamicProperties> __Marshaller_protocol_DynamicProperties = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.DynamicProperties.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.Block> __Marshaller_protocol_Block = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.Block.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.NumberMessage> __Marshaller_protocol_NumberMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.NumberMessage.Parser));

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BlockReference> __Method_getBlockReference = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.BlockReference>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getBlockReference",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_BlockReference);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.DynamicProperties> __Method_GetDynamicProperties = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.DynamicProperties>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDynamicProperties",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_DynamicProperties);

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.Block> __Method_GetNowBlock = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNowBlock",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_Block);

    static readonly grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.Block> __Method_GetBlockByNum = new grpc::Method<global::TronNet.Protocol.NumberMessage, global::TronNet.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockByNum",
        __Marshaller_protocol_NumberMessage,
        __Marshaller_protocol_Block);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TronNet.Protocol.ApiReflection.Descriptor.Services[3]; }
    }

    /// <summary>Client for Database</summary>
    public partial class DatabaseClient : grpc::ClientBase<DatabaseClient>
    {
      /// <summary>Creates a new client for Database</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DatabaseClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Database that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DatabaseClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DatabaseClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DatabaseClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockReference getBlockReference(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlockReference(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TronNet.Protocol.BlockReference getBlockReference(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getBlockReference, null, options, request);
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockReference> getBlockReferenceAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlockReferenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// for tapos
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.BlockReference> getBlockReferenceAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getBlockReference, null, options, request);
      }
      public virtual global::TronNet.Protocol.DynamicProperties GetDynamicProperties(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDynamicProperties(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.DynamicProperties GetDynamicProperties(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDynamicProperties, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DynamicProperties> GetDynamicPropertiesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDynamicPropertiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.DynamicProperties> GetDynamicPropertiesAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDynamicProperties, null, options, request);
      }
      public virtual global::TronNet.Protocol.Block GetNowBlock(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Block GetNowBlock(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetNowBlockAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNowBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetNowBlockAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNowBlock, null, options, request);
      }
      public virtual global::TronNet.Protocol.Block GetBlockByNum(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.Block GetBlockByNum(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetBlockByNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockByNumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.Block> GetBlockByNumAsync(global::TronNet.Protocol.NumberMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockByNum, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DatabaseClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatabaseClient(configuration);
      }
    }

  }
  public static partial class Monitor
  {
    static readonly string __ServiceName = "protocol.Monitor";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::TronNet.Protocol.EmptyMessage> __Marshaller_protocol_EmptyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.EmptyMessage.Parser));
    static readonly grpc::Marshaller<global::TronNet.Protocol.MetricsInfo> __Marshaller_protocol_MetricsInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TronNet.Protocol.MetricsInfo.Parser));

    static readonly grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.MetricsInfo> __Method_GetStatsInfo = new grpc::Method<global::TronNet.Protocol.EmptyMessage, global::TronNet.Protocol.MetricsInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatsInfo",
        __Marshaller_protocol_EmptyMessage,
        __Marshaller_protocol_MetricsInfo);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TronNet.Protocol.ApiReflection.Descriptor.Services[4]; }
    }

    /// <summary>Client for Monitor</summary>
    public partial class MonitorClient : grpc::ClientBase<MonitorClient>
    {
      /// <summary>Creates a new client for Monitor</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MonitorClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Monitor that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MonitorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MonitorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MonitorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::TronNet.Protocol.MetricsInfo GetStatsInfo(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TronNet.Protocol.MetricsInfo GetStatsInfo(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatsInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MetricsInfo> GetStatsInfoAsync(global::TronNet.Protocol.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TronNet.Protocol.MetricsInfo> GetStatsInfoAsync(global::TronNet.Protocol.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatsInfo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MonitorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MonitorClient(configuration);
      }
    }

  }
  /// <summary>
  /// the api of tron's network such as node list.
  /// </summary>
  public static partial class Network
  {
    static readonly string __ServiceName = "protocol.Network";


    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TronNet.Protocol.ApiReflection.Descriptor.Services[5]; }
    }

    /// <summary>Client for Network</summary>
    public partial class NetworkClient : grpc::ClientBase<NetworkClient>
    {
      /// <summary>Creates a new client for Network</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetworkClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Network that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetworkClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetworkClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetworkClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetworkClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworkClient(configuration);
      }
    }

  }
}
#endregion
